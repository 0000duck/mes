<view name="deliveryDetails" modelName="delivery"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view"
	xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd">
	<component type="window" name="window" reference="window">
		<ribbon>
			<template name="standardFormTemplate" />
			<group name="generate">
				<bigButton name="generateOrder" icon="pdfIcon24.png"
					state="enabled" />
				<bigButton name="generateDelivery" icon="pdfIcon24.png"
					state="enabled" />
			</group>
			<group name="status">
				<smallButton name="accept" icon="startIcon16.png"
					state="disabled">
					<script>
						<![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (this.state == "draft") {
										if (window.confirm("#{translate(deliveries.deliveryDetails.window.ribbon.status.accept.confirm)}")) {
											#{form}.performEvent('changeState', ['02prepared']);
										};
									} else if (this.state == "prepare") {
										if (window.confirm("#{translate(deliveries.deliveryDetails.window.ribbon.status.correctOrder.confirm)}")) {
											#{form}.performEvent('changeState', ['03duringCorrection']);
										};
									} else if (this.state == "correct") {
										if (window.confirm("#{translate(deliveries.deliveryDetails.window.ribbon.status.approveDelivery.confirm)}")) {
											#{form}.performEvent('changeState', ['05approved']);
										};
									} else if (this.state == "receive") {
										if (window.confirm("#{translate(deliveries.deliveryDetails.window.ribbon.status.receiveDelivery.confirm)}")) {
											#{form}.performEvent('changeState', ['06received']);
										};
									}
								}
							});
							]]>
					</script>
				</smallButton>
				<smallButton name="declineDelivery" icon="deleteIcon16.png"
					state="disabled">
					<script>
					<![CDATA[
						this.addOnChangeListener({
							onClick: function() {
								if (window.confirm("#{translate(deliveries.deliveryDetails.window.ribbon.status.declineDelivery.confirm)}")) {
									#{form}.performEvent('changeState', ['04declined']);
								};
							}
						});
							]]>
					</script>
				</smallButton>
				<smallButton name="approveDelivery" icon="acceptIcon16.png"
					state="disabled">
					<script>
						<![CDATA[
						this.addOnChangeListener({
							onClick: function() {
								if (window.confirm("#{translate(deliveries.deliveryDetails.window.ribbon.status.approveDelivery.confirm)}")) {
									#{form}.performEvent('changeState', ['05approved']);
								};
							}
						});
						]]>
					</script>
				</smallButton>
			</group>
			<group name="copy">
				<bigButton name="copyOrderedProductToDelivered" icon="copyIcon24.png"
					state="disabled" />
			</group>
		</ribbon>
		<windowTab name="mainTab">
			<component type="form" name="deliveriesDetails" reference="form">
				<script>
					<![CDATA[
					var save = #{window}.getRibbonItem("actions.save");
					var saveBack = #{window}.getRibbonItem("actions.saveBack");
					var saveNew = #{window}.getRibbonItem("actions.saveNew");
					var cancel = #{window}.getRibbonItem("actions.cancel");
					var del = #{window}.getRibbonItem("actions.delete");
					var accept = #{window}.getRibbonItem("status.accept");
					var declineDelivery = #{window}.getRibbonItem("status.declineDelivery");
					var approveDelivery = #{window}.getRibbonItem("status.approveDelivery");
					var copyOrderedProductToDelivered = #{window}.getRibbonItem("copy.copyOrderedProductToDelivered");
					this.addOnChangeListener({
						onSetValue: function(value) {
							if (! value || ! value.content) {
								return;
							}
							save.enable();
							saveBack.enable();
							saveNew.enable();
							if (! value.content.entityId) {
								cancel.disable();
								del.disable();
								accept.disable();
								declineDelivery.disable();
								approveDelivery.disable();
								return;
							}
							cancel.enable();
							del.enable();
							var state = #{state}.getValue().content.value;
							if (!state) {
								return;
							}
							if (state == "01draft") {
								accept.enable();
								accept.state = "draft";
								accept.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.accept)}");
								accept.setIcon('startIcon16.png');
								declineDelivery.enable();
								declineDelivery.state = "decline";
								declineDelivery.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.declineDelivery)}");
								declineDelivery.setIcon('deleteIcon16.png');
								approveDelivery.enable();
								copyOrderedProductToDelivered.enable();
							} else if (state == "02prepared") {
								accept.enable();
								accept.state = "prepare";
								accept.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.correctOrder)}");
								accept.setIcon('startIcon16.png');
								declineDelivery.enable();
								declineDelivery.state = "decline";
								declineDelivery.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.declineDelivery)}");
								declineDelivery.setIcon('deleteIcon16.png');
								approveDelivery.enable();
								copyOrderedProductToDelivered.disable();
							} else if (state == "03duringCorrection") {
								accept.disable();
								accept.state = "correct";
								accept.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.receiveDelivery)}");
								accept.setIcon('acceptIcon16.png');
								declineDelivery.enable();
								declineDelivery.state = "decline";
								declineDelivery.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.declineDelivery)}");
								declineDelivery.setIcon('deleteIcon16.png');
								approveDelivery.enable();
								copyOrderedProductToDelivered.enable();
							} else if (state == "05approved"){
								accept.enable();
								accept.state = "receive";
								accept.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.receiveDelivery)}");
								accept.setIcon('acceptIcon16.png');
								declineDelivery.enable();
								declineDelivery.state = "decline";
								declineDelivery.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.declineDelivery)}");
								declineDelivery.setIcon('deleteIcon16.png');
								approveDelivery.disable();
								copyOrderedProductToDelivered.disable();
							} else {
								save.disable();
								saveBack.disable();
								saveNew.disable();
								cancel.disable();
								del.disable();
								accept.disable();
								declineDelivery.disable();
								approveDelivery.disable();
								copyOrderedProductToDelivered.disable();
							}
						}
					});
					]]>
				</script>
				<component type="gridLayout" name="gridLayout" columns="3"
					rows="6">
					<layoutElement column="1" row="1">
						<component type="input" name="number" field="number"
							reference="number" />
					</layoutElement>
					<layoutElement column="1" row="2" height="2">
						<component type="textarea" name="name" field="name"
							reference="name" />
					</layoutElement>
					<layoutElement column="1" row="4" height="3">
						<component type="textarea" name="description" field="description" />
					</layoutElement>
					<layoutElement column="2" row="1">
						<component type="lookup" name="supplier" reference="supplier"
							field="supplier">
							<option type="column" name="name" fields="name" />
							<option type="searchable" value="name,number" />
							<option type="orderable" value="name,number" />
							<option type="expression"
								value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
							<option type="fieldCode" value="number" />
						</component>
					</layoutElement>
					<layoutElement column="2" row="2">
						<component type="calendar" name="deliveryDate" field="deliveryDate"
							reference="deliveryDate">
							<option type="withTimePicker" value="true" />
						</component>
					</layoutElement>
					<layoutElement column="3" row="1">
						<component type="select" name="state" field="state"
							reference="state" defaultEnabled="never" />
					</layoutElement>
					<layoutElement column="3" row="2">
						<component type="input" name="deliveryDateBuffer"
							reference="deliveryDateBuffer" defaultEnabled="never" />
					</layoutElement>
				</component>
				<option type="header" value="true" />
				<option type="expression" value="#name" />
				<listener event="changeState"
					class="com.qcadoo.mes.deliveries.states.client.DeliveryStateChangeViewClient" method="changeState" />
			</component>
		</windowTab>
		<windowTab name="orderedProductTab">
			<component type="gridLayout" name="orderedProductsGridLayout"
				columns="1" rows="1">
				<layoutElement column="1" row="1">
					<component type="grid" name="orderedProducts" reference="orderedProducts"
						source="#{form}.orderedProducts" defaultEnabled="false">
						<option type="column" name="number" fields="product"
							expression="#product['number']" link="true" />
						<option type="column" name="name" fields="product"
							expression="#product['name']" link="true" />
						<option type="column" name="orderedQuantity" fields="orderedQuantity" />
						<option type="column" name="unit" fields="product"
							expression="#product['unit']" link="false" width="70" />
						<option type="order" column="number" direction="desc" />
						<option type="correspondingView" value="deliveries/orderedProductDetails" />
						<option type="correspondingComponent" value="form" />
						<option type="correspondingViewInModal" value="true" />

						<option type="searchable" value="number,name,orderedQuantity,unit" />
						<option type="orderable" value="number,name,orderedQuantity,unit" />
						<option type="creatable" value="true" />
						<option type="deletable" value="true" />
						<option type="fullscreen" value="true" />
						<option type="multiselect" value="false" />
					</component>
				</layoutElement>
			</component>
		</windowTab>
		<windowTab name="deliveredProductTab">
			<component type="gridLayout" name="deliveredProductsGridLayout"
				columns="1" rows="1">
				<layoutElement column="1" row="1">
					<component type="grid" name="deliveredProducts"
						reference="deliveredProducts" source="#{form}.deliveredProducts"
						defaultEnabled="false">
						<option type="column" name="number" fields="product"
							expression="#product['number']" link="true" />
						<option type="column" name="name" fields="product"
							expression="#product['name']" link="true" />
						<option type="column" name="orderedQuantity" fields="orderedQuantity" />
						<option type="column" name="damagedQuantity" fields="damagedQuantity" />
						<option type="column" name="unit" fields="product"
							expression="#product['unit']" link="false" width="70" />
						<option type="order" column="number" direction="desc" />
						<option type="correspondingView" value="deliveries/deliveredProductDetails" />
						<option type="correspondingComponent" value="form" />
						<option type="correspondingViewInModal" value="true" />
						<option type="searchable"
							value="number,name,orderedQuantity,damagedQuantity,unit" />
						<option type="orderable"
							value="number,name,orderedQuantity,damagedQuantity,unit" />
						<option type="creatable" value="true" />
						<option type="deletable" value="true" />
						<option type="fullscreen" value="true" />
						<option type="multiselect" value="false" />
					</component>
				</layoutElement>
			</component>
		</windowTab>
	</component>
	<hooks>
		<beforeRender class="com.qcadoo.mes.deliveries.hooks.DeliveryDetailsHooks" method="generateAssignmentToShiftReportNumber" />
		<beforeRender class="com.qcadoo.mes.deliveries.hooks.DeliveryDetailsHooks" method="changedEnabledFieldForSpecificOrderState" />
	</hooks>
</view>