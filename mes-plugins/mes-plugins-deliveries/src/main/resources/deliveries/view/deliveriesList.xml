<view name="deliveriesList" modelName="delivery" menuAccessible="true"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view"
	xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd">
	
	<component type="window" name="window" reference="window">
	
		<ribbon>
			<template name="standardGridTemplate" />
			<group name="status">
				<smallButton name="accept" icon="startIcon16.png" state="disabled">
					<script>
						<![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (this.state == "draft") {
										if (window.confirm("#{translate(deliveries.deliveryDetails.window.ribbon.status.accept.confirm)}")) {
											#{grid}.performEvent('changeState', ['02prepared']);
										};
									} else if (this.state == "prepare") {
										if (window.confirm("#{translate(deliveries.deliveryDetails.window.ribbon.status.correctOrder.confirm)}")) {
											#{grid}.performEvent('changeState', ['03duringCorrection']);
										};
									} else if (this.state == "correct") {
										if (window.confirm("#{translate(deliveries.deliveryDetails.window.ribbon.status.approveDelivery.confirm)}")) {
											#{grid}.performEvent('changeState', ['05approved']);
										};
									} else if (this.state == "receive") {
										if (window.confirm("#{translate(deliveries.deliveryDetails.window.ribbon.status.receiveDelivery.confirm)}")) {
											#{grid}.performEvent('changeState', ['06received']);
										};
									}
								}
							});
						]]>
					</script>
				</smallButton>
				<smallButton name="declineDelivery" icon="deleteIcon16.png"
					state="disabled">
					<script>
						<![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.confirm("#{translate(deliveries.deliveryDetails.window.ribbon.status.declineDelivery.confirm)}")) {
										#{grid}.performEvent('changeState', ['04declined']);
									};
								}
							});
						]]>
					</script>
				</smallButton>
				<smallButton name="approveDelivery" icon="acceptIcon16.png"
					state="disabled">
					<script>
						<![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.confirm("#{translate(deliveries.deliveryDetails.window.ribbon.status.approveDelivery.confirm)}")) {
										#{grid}.performEvent('changeState', ['05approved']);
									};
								}
							});
						]]>
					</script>
				</smallButton>
			</group>
		</ribbon>
		
		<component type="grid" name="deliveriesList" reference="grid">
			<script>
 				<![CDATA[ 
					var copyBtn = #{window}.getRibbonItem("actions.copy");
					var deleteBtn = #{window}.getRibbonItem("actions.delete");
					
					var acceptBtn = #{window}.getRibbonItem("status.accept");
					var declineDeliveryBtn = #{window}.getRibbonItem("status.declineDelivery");
					var approveDeliveryBtn = #{window}.getRibbonItem("status.approveDelivery");
					
					var listener = {
						onChange: function(selectedEntitiesArray) {
							if (!selectedEntitiesArray || selectedEntitiesArray.length == 0) {
								copyBtn.disable();
								deleteBtn.disable();
								acceptBtn.disable();
								declineDeliveryBtn.disable();
								approveDeliveryBtn.disable();
							} else {
								var noDifferentStates = true;
 								if(selectedEntitiesArray.length > 1)
								{
									for (var i = selectedEntitiesArray.length-1 ; i > 0 ; i--) {
										if (selectedEntitiesArray[i-1].fields.state != selectedEntitiesArray[i].fields.state
										|| selectedEntitiesArray[i-1].fields.externalSynchronized == '0'
										|| selectedEntitiesArray[i].fields.externalSynchronized == '0') {
											noDifferentStates = false;
											break;
										}
									}
								} 
								if (selectedEntitiesArray.length == 1 || noDifferentStates) {
									var state = selectedEntitiesArray[0].fields.state;
									
									if (state == "01draft") {
										deleteBtn.enable();
										acceptBtn.enable();
										acceptBtn.state = "draft";
										acceptBtn.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.accept)}");
										acceptBtn.setIcon('startIcon16.png');
										declineDeliveryBtn.enable();
										declineDeliveryBtn.state = "decline";
										declineDeliveryBtn.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.declineDelivery)}");
										declineDeliveryBtn.setIcon('deleteIcon16.png');
										approveDeliveryBtn.enable();
									} else if (state == "02prepared") {
										deleteBtn.disable();
										acceptBtn.enable();
										acceptBtn.state = "prepare";
										acceptBtn.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.correctOrder)}");
										acceptBtn.setIcon('startIcon16.png');
										declineDeliveryBtn.enable();
										declineDeliveryBtn.state = "decline";
										declineDeliveryBtn.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.declineDelivery)}");
										declineDeliveryBtn.setIcon('deleteIcon16.png');
										approveDeliveryBtn.enable();
									} else if (state == "03duringCorrection") {
										deleteBtn.disable();
										acceptBtn.disable();
										acceptBtn.state = "correct";
										acceptBtn.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.receiveDelivery)}");
										acceptBtn.setIcon('acceptIcon16.png');
										declineDeliveryBtn.enable();
										declineDeliveryBtn.state = "decline";
										declineDeliveryBtn.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.declineDelivery)}");
										declineDeliveryBtn.setIcon('deleteIcon16.png');
										approveDeliveryBtn.enable();
									} else if (state == "05approved"){
										deleteBtn.disable();
										acceptBtn.enable();
										acceptBtn.state = "receive";
										acceptBtn.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.receiveDelivery)}");
										acceptBtn.setIcon('acceptIcon16.png');
										declineDeliveryBtn.enable();
										declineDeliveryBtn.state = "decline";
										declineDeliveryBtn.setLabel("#{translate(deliveries.deliveryDetails.window.ribbon.status.declineDelivery)}");
										declineDeliveryBtn.setIcon('deleteIcon16.png');
										approveDeliveryBtn.disable();
									} else if (state == "06received"){
										deleteBtn.disable();
										acceptBtn.disable();
										declineDeliveryBtn.disable();
										approveDeliveryBtn.disable();
									} else {
										deleteBtn.enable();
										acceptBtn.disable();
										declineDeliveryBtn.disable();
										approveDeliveryBtn.disable();
									}
								} else {
									deleteBtn.disable("#{translate(deliveries.delivery.ribbon.message.deliveriesWithDifferentStatesSelected)}");
									acceptBtn.disable("#{translate(deliveries.delivery.ribbon.message.deliveriesWithDifferentStatesSelected)}");
									declineDeliveryBtn.disable("#{translate(deliveries.delivery.ribbon.message.deliveriesWithDifferentStatesSelected)}");
									approveDeliveryBtn.disable("#{translate(deliveries.delivery.ribbon.message.deliveriesWithDifferentStatesSelected)}");
								}
								copyBtn.enable();
							}
						}
					}
					
					this.addOnChangeListener(listener);
				]]>
			</script>
			<option type="column" name="number" fields="number" link="true" width="50" />
			<option type="column" name="name" fields="name" link="true" width="100" />
			<option type="column" name="supplier" fields="supplier"
				expression="#supplier['name']" />
			<option type="column" name="deliveryDate" fields="deliveryDate" width="100"/>
			<option type="column" name="state" fields="state" />
			<option type="column" name="createDate" fields="createDate" width="100"/>
			
			<option type="searchable" value="name,number,supplier,deliveryDate,state,createDate" />
			<option type="orderable" value="name,number,supplier,deliveryDate,state,createDate" />
			
			<option type="order" column="number" direction="asc" />
			
			<option type="correspondingView" value="deliveries/deliveryDetails" />
			<option type="correspondingComponent" value="form" />
			
			<option type="fullscreen" value="true" />
			<option type="multiselect" value="true" />
			
			<listener event="changeState"
				class="com.qcadoo.mes.deliveries.states.client.DeliveryStateChangeViewClient"
				method="changeState" />
		</component>
		
		<option type="fixedHeight" value="true" />
		<option type="header" value="false" />
	</component>
</view>