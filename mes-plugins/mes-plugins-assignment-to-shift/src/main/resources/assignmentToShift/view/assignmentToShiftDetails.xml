<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 1.3

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view name="assignmentToShiftDetails" modelName="assignmentToShift"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view"
      xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd">

    <component type="window" name="window" reference="window">

        <ribbon>
            <template name="standardFormTemplate"/>

            <group name="status">
                <smallButton name="acceptAssignmentToShift" icon="startIcon16.png" state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.confirm("#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.accepted.confirm)}")) {
										#{form}.performEvent('changeState', ['02accepted']);
									};
								}
							});
						]]>
                    </script>
                </smallButton>
                <smallButton name="correctAssignmentToShift" icon="deleteIcon16.png" state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.confirm("#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.duringCorrection.confirm)}")) {
										#{form}.performEvent('changeState', ['03duringCorrection']);
									};
								}
							});
						]]>
                    </script>
                </smallButton>
                <smallButton name="acceptCorrectedAssignmentToShift" icon="deleteIcon16.png" state="disabled">
                    <script>
                        <![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.confirm("#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.corrected.confirm)}")) {
										#{form}.performEvent('changeState', ['04corrected']);
									};
								}
							});
						]]>
                    </script>
                </smallButton>
            </group>
        </ribbon>

        <windowTab name="mainTab">
            <component type="form" name="form" reference="form">

                <script>
                    <![CDATA[
						this.addOnChangeListener({
							onSetValue: function(value) {
								var state = #{state}.getValue().content.value;

								if (!state || !value || !value.content) {
									return;
								}

								updateRibbon(state);
							}
						});

						function toggleEditable(state, enabled, message) {
						    var isDraft = (state == "01draft");
							var isAccepted = (state == "02accepted");
                          	var isDuringCorrection = (state == "03duringCorrection");
							var isCorrected = (state == "04corrected");

							var toggleRibbonItems = [
									"actions.save",
									"actions.saveBack",
									"actions.saveNew",
									"actions.delete",
									"status.acceptAssignmentToShift",
									"status.correctAssignmentToShift",
									"status.acceptCorrectedAssignmentToShift"
								],

								toggleRibbonItemsLen = toggleRibbonItems.length,

								elementIndex = 0,
								ribbonItemName = "",
								ribbonItem = null;

							for (elementIndex = 0; elementIndex < toggleRibbonItemsLen; elementIndex++) {
								ribbonItemName = toggleRibbonItems[elementIndex];
								ribbonItem = #{window}.getRibbonItem(ribbonItemName);

								if (!ribbonItem) {
									QCD.error("Can not find ribbon element: " + ribbonItemName + " - ommiting.");
									continue;
								}

								if (enabled) {
								    if (isDraft && ((ribbonItemName == "status.correctAssignmentToShift") || (ribbonItemName == "status.acceptCorrectedAssignmentToShift"))) {
								        ribbonItem.disable();
								    } else if (isDuringCorrection && ((ribbonItemName == "actions.delete") || (ribbonItemName == "status.acceptAssignmentToShift") || (ribbonItemName == "status.correctAssignmentToShift"))) {
								    	ribbonItem.disable();
								    } else {
									    ribbonItem.enable();
									}
								} else {
								    if ((isAccepted || isCorrected) && (ribbonItemName == "status.correctAssignmentToShift")) {
									    ribbonItem.enable();
									} else {
									    ribbonItem.disable(message);
									}
								}
							}
						}

						function updateRibbon(state) {
							var isDraft = (state == "01draft");
                          	var isDuringCorrection = (state == "03duringCorrection");

							if (isDraft) {
							    if (#{externalSynchronized}.getValue().content.value == 0) {
								    toggleEditable(state, false, "#{translate(assignmentToShift.assignmentToShift.info.isWaitingForSync)}");
							    } else {
							        toggleEditable(state, true, "");
                                }
                            } else if (isDuringCorrection) {
                                toggleEditable(state, true, "");
							} else {
								toggleEditable(state, false, "#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.stateDoesNotAllowEditing)}");
							}
						}
					]]>
                </script>

                <component type="gridLayout" name="gridLayout" columns="3"
                           rows="5">
                    <layoutElement column="1" row="1" height="5">
                        <component type="gridLayout" name="leftColGridLayout" columns="1"
                                   rows="5">
                            <layoutElement column="1" row="1">
                                <component type="calendar" name="startDate" field="startDate"
                                           reference="startDate">
                                </component>
                            </layoutElement>
                            <layoutElement column="1" row="2">
                                <component type="lookup" name="shift" field="shift"
                                           reference="shift">
                                    <option type="searchable" value="name"/>
                                    <option type="orderable" value="name"/>

                                    <option type="expression" value="#name"/>
                                    <option type="fieldCode" value="name"/>
                                </component>
                            </layoutElement>
                            <layoutElement column="1" row="3">
                                <component type="select" name="state" field="state"
                                           reference="state" defaultEnabled="never" hasLabel="false"
                                           defaultVisible="false"/>
                                <component type="hidden" name="externalSynchronized"
                                           field="externalSynchronized" reference="externalSynchronized"
                                           persistent="false"/>
                            </layoutElement>
                        </component>
                    </layoutElement>
                    <layoutElement column="2" row="1" width="2" height="5">
                        <component type="grid" name="staffAssignmentToShifts"
                                   reference="staffAssignmentToShifts" source="#{form}.staffAssignmentToShifts">
                            <option type="column" name="workerNumber" fields="worker"
                                    expression="#worker['number']" link="true"/>
                            <option type="column" name="workerName" fields="worker"
                                    expression="#worker['name']" link="true"/>
                            <option type="column" name="workerSurname" fields="worker"
                                    expression="#worker['surname']" link="true"/>
                            <option type="column" name="occupationTypeValueForGrid"
                                    fields="occupationTypeValueForGrid"/>

                            <option type="order" column="workerNumber" direction="desc"/>

                            <option type="correspondingView"
                                    value="assignmentToShift/staffAssignmentToShiftDetails"/>
                            <option type="correspondingComponent" value="form"/>
                            <option type="correspondingViewInModal" value="true"/>

                            <option type="searchable"
                                    value="workerNumber,workerName,workerSurname,occupationTypeValueForGrid"/>
                            <option type="orderable"
                                    value="workerNumber,workerName,workerSurname,occupationTypeValueForGrid"/>
                            <option type="creatable" value="true"/>
                            <option type="deletable" value="true"/>
                            <option type="paginable" value="false"/>

                            <option type="fullscreen" value="true"/>
                            <option type="multiselect" value="true"/>
                        </component>
                    </layoutElement>
                </component>

                <option type="header" value="true"/>
                <option type="expression" value="#name"/>

                <listener event="changeState"
                          class="com.qcadoo.mes.assignmentToShift.states.client.AssignmentToShiftStateChangeViewClient"
                          method="changeState"/>
            </component>
        </windowTab>

        <windowTab name="comparePlanAndCorrected">
            <component type="form" name="compareForm" reference="compareForm">
                <component type="gridLayout" name="gridLayout" columns="2"
                           rows="1">
                    <layoutElement column="1" row="1">
                        <component type="grid" name="plannedStaffAssignmentToShifts"
                                   reference="plannedStaffAssignmentToShifts"
                                   source="#{form}.plannedStaffAssignmentToShifts">
                            <option type="column" name="workerNumber" fields="worker"
                                    expression="#worker['number']"/>
                            <option type="column" name="workerName" fields="worker"
                                    expression="#worker['name']"/>
                            <option type="column" name="workerSurname" fields="worker"
                                    expression="#worker['surname']"/>
                            <option type="column" name="occupationTypeValueForGrid"
                                    fields="occupationTypeValueForGrid"/>

                            <option type="order" column="workerNumber" direction="desc"/>

                            <option type="searchable" value="false"/>
                            <option type="orderable" value="false"/>
                            <option type="editable" value="false"/>
                            <option type="paginable" value="false"/>

                            <option type="fullscreen" value="true"/>
                            <option type="multiselect" value="true"/>
                            <option type="fixedHeight" value="true"/>
                        </component>
                    </layoutElement>
                    <layoutElement column="2" row="1">
                        <component type="grid" name="correctedStaffAssignmentToShifts"
                                   reference="correctedStaffAssignmentToShifts"
                                   source="#{form}.correctedStaffAssignmentToShifts">
                            <option type="column" name="workerNumber" fields="worker"
                                    expression="#worker['number']"/>
                            <option type="column" name="workerName" fields="worker"
                                    expression="#worker['name']"/>
                            <option type="column" name="workerSurname" fields="worker"
                                    expression="#worker['surname']"/>
                            <option type="column" name="occupationTypeValueForGrid"
                                    fields="occupationTypeValueForGrid"/>

                            <option type="order" column="workerNumber" direction="desc"/>

                            <option type="searchable" value="false"/>
                            <option type="orderable" value="false"/>
                            <option type="editable" value="false"/>
                            <option type="paginable" value="false"/>

                            <option type="fullscreen" value="true"/>
                            <option type="multiselect" value="true"/>
                            <option type="fixedHeight" value="true"/>
                        </component>
                    </layoutElement>
                </component>
            </component>
        </windowTab>

        <windowTab name="history">
            <component type="grid" name="assignmentToShiftStateChange"
                       reference="grid" source="#{form}.assignmentToShiftStateChange">
                <option type="column" name="dateAndTime" fields="dateAndTime"/>
                <option type="column" name="previousState" fields="sourceState"/>
                <option type="column" name="currentState" fields="targetState"/>
                <option type="column" name="shift" fields="shift"
                        expression="#shift != null ? #shift['name'] : ''"/>
                <option type="column" name="worker" fields="worker"/>

                <option type="order" column="dateAndTime" direction="asc"/>

                <option type="searchable" value="false"/>
                <option type="orderable" value="false"/>
            </component>
        </windowTab>

    </component>

    <hooks>
        <beforeRender
                class="com.qcadoo.mes.assignmentToShift.hooks.AssignmentToShiftDetailsHooks"
                method="onBeforeRender"/>
    </hooks>

</view>