<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 1.2.0

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view name="assignmentToShiftList" modelName="assignmentToShift"
	menuAccessible="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://schema.qcadoo.org/view" xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd">
	<component type="window" name="window" reference="window">
		<ribbon>
			<template name="standardGridTemplate" />
			<group name="status">
				<bigButton name="state" icon="startIcon24.png" state="disabled">
					<script>
						<![CDATA[
							this.addOnChangeListener({
								onClick: function() {
								var actualState = this.actualState;
									if (actualState == "draft") {
										if (window.confirm("#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.accepted.confirm)}")) {
											#{grid}.performEvent('changeState', ['02accepted']);
										};
									} else if (actualState == "accepted") {
										if (window.confirm("#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.duringCorrection.confirm)}")) {
											#{grid}.performEvent('changeState', ['03duringCorrection']);
										};
									} else if (actualState == "duringCorrection") {
										if (window.confirm("#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.corrected.confirm)}")) {
											#{grid}.performEvent('changeState', ['04corrected']);
										};
									} else if (actualState == "corrected") {
										if (window.confirm("#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.duringCorrection.confirm)}")) {
											#{grid}.performEvent('changeState', ['03duringCorrection']);
										};
									}
								}
							});
						]]>
					</script>
				</bigButton>
			</group>
		</ribbon>
		<component type="grid" name="assignmentToShiftList"
			reference="grid">
				<script>
 				<![CDATA[ 
					var copyBtn = #{window}.getRibbonItem("actions.copy");
					var deleteBtn = #{window}.getRibbonItem("actions.delete");
					var stateButton = #{window}.getRibbonItem("status.state");
					var listener = {
						onChange: function(selectedEntitiesArray) {
							if (!selectedEntitiesArray || selectedEntitiesArray.length == 0) {
								copyBtn.disable();
								deleteBtn.disable();
								stateButton.disable();
							} else {
								var noDifferentStates = true;
 								if(selectedEntitiesArray.length > 1)
								{
									for (var i = selectedEntitiesArray.length-1 ; i > 0 ; i--) {
										if (selectedEntitiesArray[i-1].fields.state != selectedEntitiesArray[i].fields.state) {
											noDifferentStates = false;
											break;
										}
									}
								} 
								if (selectedEntitiesArray.length == 1 || noDifferentStates) {
									var state = selectedEntitiesArray[0].fields.state;
									if (state == "01draft") {
										stateButton.enable();
										stateButton.actualState = "draft";
										stateButton.forState="02accepted";
										stateButton.setLabel("#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.accepted)}");
										stateButton.confirmMessage = "#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.accepted.confirm)}"
									} else if (state == "02accepted") {
										stateButton.enable();
										stateButton.actualState = "accepted";
										stateButton.forState="03duringCorrection";
										stateButton.setLabel("#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.duringCorrection)}");
										stateButton.confirmMessage = "#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.duringCorrection.confirm)}"
									} else if (state == "03duringCorrection") {
										stateButton.enable();
										stateButton.forState="04corrected";
										stateButton.actualState = "duringCorrection";
										stateButton.setLabel("#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.corrected)}");
										stateButton.confirmMessage = "#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.corrected.confirm)}"
									} else if (state == "04corrected") {
										stateButton.enable();
										stateButton.forState="03duringCorrection";
										stateButton.actualState = "corrected";
										stateButton.setLabel("#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.duringCorrection)}");
										stateButton.confirmMessage = "#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.duringCorrection.confirm)}"
									}else{
										stateButton.setLabel("#{translate(assignmentToShift.assignmentToShiftDetails.window.ribbon.status.state)}");
										stateButton.disable();
									}
								}
								copyBtn.enable();
								deleteBtn.disable();
							}
						}
					}
					this.addOnChangeListener(listener);
				]]>
			</script>
			<option type="column" name="startDate" fields="startDate"
				link="true" />
			<option type="column" name="shift" fields="shift" link="true"
				expression="#shift['name']" />
			<option type="column" name="state" fields="state" />
			<option type="column" name="approvedAttendanceList" fields="approvedAttendanceList" />
			<option type="order" column="name" direction="asc" />
			<option type="correspondingView" value="assignmentToShift/assignmentToShiftDetails" />
			<option type="correspondingComponent" value="form" />
			<option type="searchable" value="startDate,shift,state" />
			<option type="orderable" value="startDate" />
			<option type="fullscreen" value="true" />
			<option type="multiselect" value="true" />
			<listener event="changeState"
				class="com.qcadoo.mes.assignmentToShift.states.client.AssignmentToShiftStateChangeViewClient"
				method="changeState" />
		</component>
		<option type="fixedHeight" value="true" />
		<option type="header" value="false" />
	</component>
</view>