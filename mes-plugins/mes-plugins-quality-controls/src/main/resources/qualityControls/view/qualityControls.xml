<?xml version="1.0" encoding="UTF-8"?>
<!-- *************************************************************************** 
	Copyright (c) 2010 Qcadoo Limited Project: Qcadoo MES Version: 0.3.0 This 
	file is part of Qcadoo. Qcadoo is free software; you can redistribute it 
	and/or modify it under the terms of the GNU Affero General Public License 
	as published by the Free Software Foundation; either version 3 of the License, 
	or (at your option) any later version. This program is distributed in the 
	hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
	warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
	GNU Affero General Public License for more details. You should have received 
	a copy of the GNU Affero General Public License along with this program; 
	if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth 
	Floor, Boston, MA 02110-1301 USA *************************************************************************** -->

<views plugin="qualityControls" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://schema.qcadoo.org/view" xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd">
	<view name="qualityControlsForOrder" model="qualityControl"
		menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction" />
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png"
						state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{grid}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
				<group name="reports">
					<smallButton name="pdf" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printQualityControlReport,pdf,order);"
						state="disabled" />
					<smallButton name="xls" icon="xlsIcon16.png"
						action="#{grid}.fireEvent(printQualityControlReport,xls,order);"
						state="disabled" />
				</group>
			</ribbon>
			<component type="grid" name="qualityControlsForOrder"
				reference="grid">
				<script>
					<![CDATA[
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");
						var reportsPdf = #{window}.getRibbonItem("reports.pdf");
						var reportsXls = #{window}.getRibbonItem("reports.xls");
						var listener = {
							onChange: function(selectedEntitiesArray) {
								if (! selectedEntitiesArray || selectedEntitiesArray.length == 0) {
									qualityControlStatus.disable();
									reportsPdf.disable();
									reportsXls.disable();
								} else {
									if (selectedEntitiesArray.length > 1) {
										qualityControlStatus.disable("#{translate(moreThanOneRecordSelected)}");
									} else if (selectedEntitiesArray[0].fields.closed == true) {
										qualityControlStatus.disable("#{translate(qualityControl.qualityControl.ribbon.alreadyClosed)}");
									} else {
										qualityControlStatus.enable();
									}
									var allClosed = true;
									for (var i in selectedEntitiesArray) {
										if (selectedEntitiesArray[i].fields.closed == false) {
											allClosed = false;
											break;
										}
									}
									if (allClosed) {
										reportsPdf.enable();
										reportsXls.enable();
									} else {
										reportsPdf.disable("#{translate(qualityControl.qualityControl.ribbon.notAllClosedClosed)}");
										reportsXls.disable("#{translate(qualityControl.qualityControl.ribbon.notAllClosedClosed)}");
									}
								}
							}
						}
						this.addOnChangeListener(listener);
					]]>
				</script>
				<option type="column" name="number" fields="number" link="true" />
				<option type="column" name="order" fields="order" expression="#order['number']"
					link="true" />
				<option type="column" name="closed" fields="closed" link="false"
					width="100" />
				<option type="order" column="number,order,closed" direction="desc" />
				<option type="correspondingView" value="qualityControls/qualityControlForOrder" />
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="number,order,closed" />
				<option type="orderable" value="number,order,closed" />
				<option type="fullscreen" value="true" />
				<option type="multiselect" value="true" />
				<listener event="closeQualityControl"
					bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl" />
				<listener event="printQualityControlReport"
					bean="com.qcadoo.mes.qualityControls.print.QualityControlsReportService"
					method="printQualityControlReportForOrder" />
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService"
			method="addRestrictionToQualityControlGrid" />
	</view>
	<view name="qualityControlForOrder" model="qualityControl">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="navigation" />
				<group template="formSaveCopyAndRemoveActions" />
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png"
						state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{form}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
			</ribbon>
			<component type="form" name="qualityControlForOrder"
				reference="form">
				<script>
					<![CDATA[
						var save = #{window}.getRibbonItem("actions.save");
						var saveBack = #{window}.getRibbonItem("actions.saveBack");
						var saveNew = #{window}.getRibbonItem("actions.saveNew");
						var cancel = #{window}.getRibbonItem("actions.cancel");
						var del = #{window}.getRibbonItem("actions.delete");
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");

						this.addOnChangeListener({
							onSetValue: function(value) {
								if (! value.content || ! value.content.entityId) {
									return;
								}
							
								var closed = #{closed}.getValue().content.value;
								if (closed && closed == false) {
									qualityControlStatus.enable();
									save.enable();
									saveBack.enable();
									saveNew.enable();
									cancel.enable();
									del.enable();
								} else {
									qualityControlStatus.disable();
									save.disable();
									saveBack.disable();
									saveNew.disable();
									cancel.disable();
									del.disable();									
								}
								
								if (value && value.content && !value.content.entityId) {
									qualityControlStatus.disable();
								}
							}
						});
					]]>
				</script>
				<component type="gridLayout" name="gridsLayout" columns="3"
					rows="11">
					<layoutElement column="1" row="1">
						<component type="input" name="number" field="number" />
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="lookup" name="order" reference="order"
							field="order">
							<option type="column" name="name" fields="name" link="true"
								width="200" />
							<option type="searchable" value="name" />
							<option type="orderable" value="name" />
							<option type="expression"
								value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
							<option type="fieldCode" value="number" />
							<listener event="onSelectedEntityChange"
								bean="com.qcadoo.mes.qualityControls.QualityControlService"
								method="setQualityControlInstruction" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="3">
						<component type="select" name="controlResult" field="controlResult"
							reference="controlResult">
							<listener event="onSelectedEntityChange"
								bean="com.qcadoo.mes.qualityControls.QualityControlService"
								method="checkQualityControlResult" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="4" height="2">
						<component type="textarea" name="comment" field="comment"
							reference="comment" />
					</layoutElement>
					<layoutElement column="1" row="6">
						<component type="checkbox" name="closed" field="closed"
							reference="closed" defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="1" row="7" height="3">
						<component type="textarea" name="controlInstruction"
							field="controlInstruction" reference="controlInstruction"
							defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="1" row="10">
						<component type="input" name="staff" field="staff"
							reference="staff" defaultEnabled="false">
							<option type="textRepresentationOnDisabled" value="false" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="11">
						<component type="input" name="date" field="date"
							reference="date" defaultEnabled="false">
							<option type="textRepresentationOnDisabled" value="false" />
						</component>
					</layoutElement>
				</component>
				<component type="select" name="qualityControlType"
					reference="qualityControlType" field="qualityControlType"
					defaultVisible="false" />
				<listener event="closeQualityControl"
					bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl" />
				<option type="header" value="true" />
				<option type="expression" value="#name" />
			</component>
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService"
			method="checkIfCommentIsRequiredBasedOnResult" />
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService"
			method="setQualityControlTypeHiddenField" />
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService"
			method="disableFormForClosedControl" />
	</view>
	<view name="qualityControlsForUnit" model="qualityControl"
		menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction" />
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png"
						state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{grid}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
				<group name="reports">
					<smallButton name="pdf" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printQualityControlReport,pdf,unit);"
						state="disabled" />
					<smallButton name="xls" icon="xlsIcon16.png"
						action="#{grid}.fireEvent(printQualityControlReport,xls,unit);"
						state="disabled" />
				</group>
			</ribbon>
			<component type="grid" name="qualityControlsForUnit"
				reference="grid">
				<script>
					<![CDATA[
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");
						var reportsPdf = #{window}.getRibbonItem("reports.pdf");
						var reportsXls = #{window}.getRibbonItem("reports.xls");
						var listener = {
							onChange: function(selectedEntitiesArray) {
								if (! selectedEntitiesArray || selectedEntitiesArray.length == 0) {
									qualityControlStatus.disable();
									reportsPdf.disable();
									reportsXls.disable();
								} else {
									if (selectedEntitiesArray.length > 1) {
										qualityControlStatus.disable("#{translate(moreThanOneRecordSelected)}");
									} else if (selectedEntitiesArray[0].fields.closed == true) {
										qualityControlStatus.disable("#{translate(qualityControl.qualityControl.ribbon.alreadyClosed)}");
									} else {
										qualityControlStatus.enable();
									}
									var allClosed = true;
									for (var i in selectedEntitiesArray) {
										if (selectedEntitiesArray[i].fields.closed == false) {
											allClosed = false;
											break;
										}
									}
									if (allClosed) {
										reportsPdf.enable();
										reportsXls.enable();
									} else {
										reportsPdf.disable("#{translate(qualityControl.qualityControl.ribbon.notAllClosedClosed)}");
										reportsXls.disable("#{translate(qualityControl.qualityControl.ribbon.notAllClosedClosed)}");
									}
								}
							}
						}
						this.addOnChangeListener(listener);
					]]>
				</script>
				<option type="column" name="number" fields="number" link="true" />
				<option type="column" name="order" fields="order" expression="#order['number']"
					link="true" />
				<option type="column" name="controlledQuantity" fields="controlledQuantity"
					link="true" />
				<option type="column" name="closed" fields="closed" link="false"
					width="100" />
				<option type="order" column="number,order,controlledQuantity,closed"
					direction="desc" />
				<option type="correspondingView" value="qualityControls/qualityControlForUnit" />
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="number,order,controlledQuantity,closed" />
				<option type="orderable" value="number,order,controlledQuantity,closed" />
				<option type="fullscreen" value="true" />
				<option type="multiselect" value="true" />
				<listener event="closeQualityControl"
					bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl" />
				<listener event="printQualityControlReport"
					bean="com.qcadoo.mes.qualityControls.print.QualityControlsReportService"
					method="printQualityControlReportForOrder" />
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService"
			method="addRestrictionToQualityControlGrid" />
	</view>
	<view name="qualityControlForUnit" model="qualityControl">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="navigation" />
				<group template="formSaveCopyAndRemoveActions" />
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png"
						state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{form}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
			</ribbon>
			<component type="form" name="qualityControlForUnit"
				reference="form">
				<script>
					<![CDATA[
						var save = #{window}.getRibbonItem("actions.save");
						var saveBack = #{window}.getRibbonItem("actions.saveBack");
						var saveNew = #{window}.getRibbonItem("actions.saveNew");
						var cancel = #{window}.getRibbonItem("actions.cancel");
						var del = #{window}.getRibbonItem("actions.delete");
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");

						this.addOnChangeListener({
							onSetValue: function(value) {
								var closed = #{closed}.getValue().content.value;
								if (closed && closed == false) {
									qualityControlStatus.enable();
									save.enable();
									saveBack.enable();
									saveNew.enable();
									cancel.enable();
									del.enable();
								} else {
									qualityControlStatus.disable();
									save.disable();
									saveBack.disable();
									saveNew.disable();
									cancel.disable();
									del.disable();									
								}
								
								if (value && value.content && !value.content.entityId) {
									qualityControlStatus.disable();
								}
							}
						});
					]]>
				</script>
				<component type="gridLayout" name="gridsLayout" columns="3"
					rows="14">
					<layoutElement column="1" row="1">
						<component type="input" name="number" field="number" />
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="lookup" name="order" reference="order"
							field="order">
							<option type="column" name="name" fields="name" link="true"
								width="200" />
							<option type="searchable" value="name" />
							<option type="orderable" value="name" />
							<option type="expression"
								value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
							<option type="fieldCode" value="number" />
							<listener event="onSelectedEntityChange"
								bean="com.qcadoo.mes.qualityControls.QualityControlService"
								method="setQualityControlInstruction" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="3" height="2">
						<component type="textarea" name="comment" field="comment"
							reference="comment" />
					</layoutElement>
					<layoutElement column="1" row="5">
						<component type="checkbox" name="closed" field="closed"
							reference="closed" defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="1" row="6">
						<component type="input" name="controlledQuantity" field="controlledQuantity" />
					</layoutElement>
					<layoutElement column="1" row="7">
						<component type="input" name="takenForControlQuantity"
							field="takenForControlQuantity" reference="takenForControlQuantity" />
					</layoutElement>
					<layoutElement column="1" row="8">
						<component type="input" name="rejectedQuantity" field="rejectedQuantity"
							reference="rejectedQuantity" />
					</layoutElement>
					<layoutElement column="1" row="9">
						<component type="input" name="acceptedDefectsQuantity"
							field="acceptedDefectsQuantity" reference="acceptedDefectsQuantity">
							<listener event="onInputChange"
								bean="com.qcadoo.mes.qualityControls.QualityControlService"
								method="checkAcceptedDefectsQuantity" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="10">
						<component type="input" name="staff" field="staff"
							reference="staff" defaultEnabled="false">
							<option type="textRepresentationOnDisabled" value="false" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="11">
						<component type="input" name="date" field="date"
							reference="date" defaultEnabled="false">
							<option type="textRepresentationOnDisabled" value="false" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="12" height="3">
						<component type="textarea" name="controlInstruction"
							reference="controlInstruction" field="controlInstruction"
							defaultEnabled="false" />
					</layoutElement>
				</component>
				<component type="select" name="qualityControlType"
					reference="qualityControlType" field="qualityControlType"
					defaultVisible="false" />
				<listener event="closeQualityControl"
					bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl" />
				<option type="header" value="true" />
				<option type="expression" value="#name" />
			</component>
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService"
			method="checkIfCommentIsRequiredBasedOnDefects" />
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService"
			method="setQuantitiesToDefaulIfEmpty" />
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService"
			method="setQualityControlTypeHiddenField" />
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService"
			method="disableFormForClosedControl" />
	</view>
	<view name="qualityControlReport" plugin="qualityControls" model="qualityControl"
		menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group name="reportsForOrder">
					<smallButton name="pdfOrder" icon="pdfIcon16.png"
						action="#{form}.fireEvent(printQualityControlReport,pdf,order);"
						state="disabled" />
					<smallButton name="xlsOrder" icon="xlsIcon16.png"
						action="#{form}.fireEvent(printQualityControlReport,xls,order);"
						state="disabled" />
				</group>
				<group name="reportsForUnit">
					<smallButton name="pdfUnit" icon="pdfIcon16.png"
						action="#{form}.fireEvent(printQualityControlReport,pdf,unit);"
						state="disabled" />
					<smallButton name="xlsUnit" icon="xlsIcon16.png"
						action="#{form}.fireEvent(printQualityControlReport,xls,unit);"
						state="disabled" />
				</group>
			</ribbon>
			<component type="form" name="qualityControlReport"
				reference="form">
				<component type="gridLayout" name="gridLayout" columns="3"
					rows="2" hasBorders="false">
					<layoutElement column="1" row="1">
						<component type="calendar" name="dateFrom" reference="dateFrom"
							defaultEnabled="true">
							<script>
								<![CDATA[
									var pdfOrder = #{window}.getRibbonItem("reportsForOrder.pdfOrder");
									var xlsOrder = #{window}.getRibbonItem("reportsForOrder.xlsOrder");
									var pdfUnit = #{window}.getRibbonItem("reportsForUnit.pdfUnit");
									var xlsUnit = #{window}.getRibbonItem("reportsForUnit.xlsUnit");
									var dateToElement = #{dateTo};
									this.performUpdateState();
									this.addOnChangeListener({
										onChange: function(selectedValue) {
											this.performUpdateState();
											if (selectedValue != null && selectedValue != 0) {
												var dateTo = dateToElement.getDate();
												if (dateTo == 0) {
													dateToElement.setDate(selectedValue);
												} else if (dateTo == null) {
													pdfOrder.disable();
													xlsOrder.disable();
													pdfUnit.disable();
													xlsUnit.disable();
												} else {
													pdfOrder.enable();
													xlsOrder.enable();
													pdfUnit.enable();
													xlsUnit.enable();
												}
											} else {
												pdfOrder.disable();
												xlsOrder.disable();
												pdfUnit.disable();
												xlsUnit.disable();
											}
										}
									});
								]]>
							</script>
						</component>
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="calendar" name="dateTo" reference="dateTo"
							defaultEnabled="true">
							<script>
								<![CDATA[
									var pdfOrder = #{window}.getRibbonItem("reportsForOrder.pdfOrder");
									var xlsOrder = #{window}.getRibbonItem("reportsForOrder.xlsOrder");
									var pdfUnit = #{window}.getRibbonItem("reportsForUnit.pdfUnit");
									var xlsUnit = #{window}.getRibbonItem("reportsForUnit.xlsUnit");
									var dateFromElement = #{dateFrom};
									this.performUpdateState();
									this.addOnChangeListener({
										onChange: function(selectedValue) {
											this.performUpdateState();
											if (selectedValue != null && selectedValue != 0) {
												var dateFrom = dateFromElement.getDate();
												if (dateFrom == 0) {
													dateFromElement.setDate(selectedValue);
												} else if (dateFrom == null) {
													pdfOrder.disable();
													xlsOrder.disable();
													pdfUnit.disable();
													xlsUnit.disable();
												} else {
													pdfOrder.enable();
													xlsOrder.enable();
													pdfUnit.enable();
													xlsUnit.enable();
												}
											} else {
												pdfOrder.disable();
												xlsOrder.disable();
												pdfUnit.disable();
												xlsUnit.disable();
											}
										}
									});
								]]>
							</script>
						</component>
					</layoutElement>
				</component>
				<option type="header" value="true" />
				<option type="expression" value="' '" />
				<listener event="printQualityControlReport"
					bean="com.qcadoo.mes.qualityControls.print.QualityControlsReportService"
					method="printQualityControlReport" />
			</component>
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService"
			method="enableCalendarsOnRender" />
	</view>
</views>