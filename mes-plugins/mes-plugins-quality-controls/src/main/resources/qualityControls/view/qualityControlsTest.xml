<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 0.3.0

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->

<qcd:views plugin="qualityControls" xmlns:qcd="http://www.qcadoo.com/view">
	<view name="qualityControls" model="qualityControl" menuAccessible="true">
		<component type="window" name="window" reference="window" header="false" fixedHeight="true">
			<windowTab name="forOrder" reference="forOrderTab">
				<ribbon>
					<!--<group template="gridNewCopyAndRemoveAction"/>-->
					<group name="controlStatus">
						<bigButton name="closeControl" icon="acceptIcon24.png" state="disabled">
							<script>
								<![CDATA[
									this.addOnChangeListener({
										onClick: function() {
											if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
												#{forOrderGrid}.performEvent('closeQualityControl', []);
											};
										}
									});
								]]>
							</script>
						</bigButton>
					</group>
					<group name="reports">
						<smallButton name="pdf" icon="pdfIcon16.png"
							action="#{forOrderGrid}.fireEvent(printQualityControlReport,pdf,order);" state="disabled"/>
						<smallButton name="xls" icon="xlsIcon16.png"
							action="#{forOrderGrid}.fireEvent(printQualityControlReport,xls,order);" state="disabled"/>
					</group>
				</ribbon>
				<component type="grid" name="qualityControlsForOrder" reference="forOrderGrid">
					<script>
						<![CDATA[
							var qualityControlStatus = #{forOrderTab}.getRibbonItem("controlStatus.closeControl");
							var reportsPdf = #{forOrderTab}.getRibbonItem("reports.pdf");
							var reportsXls = #{forOrderTab}.getRibbonItem("reports.xls");
							var listener = {
								onChange: function(selectedEntitiesArray) {
									if (! selectedEntitiesArray || selectedEntitiesArray.length == 0) {
										qualityControlStatus.disable();
										reportsPdf.disable();
										reportsXls.disable();
									} else {
										if (selectedEntitiesArray.length > 1) {
											qualityControlStatus.disable("#{translate(moreThanOneRecordSelected)}");
										} else if (selectedEntitiesArray[0].fields.closed == true) {
											qualityControlStatus.disable("#{translate(qualityControl.qualityControl.ribbon.alreadyClosed)}");
										} else {
											qualityControlStatus.enable();
										}
										var allClosed = true;
										for (var i in selectedEntitiesArray) {
											if (selectedEntitiesArray[i].fields.closed == false) {
												allClosed = false;
												break;
											}
										}
										if (allClosed) {
											reportsPdf.enable();
											reportsXls.enable();
										} else {
											reportsPdf.disable("#{translate(qualityControl.qualityControl.ribbon.notAllClosedClosed)}");
											reportsXls.disable("#{translate(qualityControl.qualityControl.ribbon.notAllClosedClosed)}");
										}
									}
								}
							}
							this.addOnChangeListener(listener);
						]]>
					</script>
					<option type="column" name="number" fields="number" link="true"/>
					<option type="column" name="order" fields="order"
						expression="#order['number']" link="true"/>
					<option type="column" name="closed" fields="closed" link="false" width="100"/>
					<option type="order" column="number,order,closed" direction="desc"/>
					<option type="correspondingView" value="qualityControls/qualityControlForOrder"/>
					<option type="correspondingComponent" value="form" />
					<option type="searchable" value="number,order,closed"/>
					<option type="orderable" value="number,order,closed"/>
					<option type="fullscreen" value="true" />
					<option type="multiselect" value="true" />
					<listener event="closeQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl"/>
					<listener event="printQualityControlReport" bean="com.qcadoo.mes.qualityControls.print.QualityControlsReportService" method="printQualityControlReportForOrder" />
				</component>
			</windowTab>
			<windowTab name="forUnit" reference="forUnitTab">
				<ribbon>
					<!--<group template="gridNewCopyAndRemoveAction"/>-->
					<group name="controlStatus">
						<bigButton name="closeControl" icon="acceptIcon24.png" state="disabled">
							<script>
								<![CDATA[
									this.addOnChangeListener({
										onClick: function() {
											if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
												#{forUnitGrid}.performEvent('closeQualityControl', []);
											};
										}
									});
								]]>
							</script>
						</bigButton>
					</group>
					<group name="reports">
						<smallButton name="pdf" icon="pdfIcon16.png"
							action="#{forUnitGrid}.fireEvent(printQualityControlReport,pdf,unit);" state="disabled"/>
						<smallButton name="xls" icon="xlsIcon16.png"
							action="#{forUnitGrid}.fireEvent(printQualityControlReport,xls,unit);" state="disabled"/>
					</group>
				</ribbon>
				<component type="grid" name="qualityControlsForUnit" reference="forUnitGrid">
					<script>
						<![CDATA[
							var qualityControlStatus = #{forUnitTab}.getRibbonItem("controlStatus.closeControl");
							var reportsPdf = #{forUnitTab}.getRibbonItem("reports.pdf");
							var reportsXls = #{forUnitTab}.getRibbonItem("reports.xls");
							var listener = {
								onChange: function(selectedEntitiesArray) {
									if (! selectedEntitiesArray || selectedEntitiesArray.length == 0) {
										qualityControlStatus.disable();
										reportsPdf.disable();
										reportsXls.disable();
									} else {
										if (selectedEntitiesArray.length > 1) {
											qualityControlStatus.disable("#{translate(moreThanOneRecordSelected)}");
										} else if (selectedEntitiesArray[0].fields.closed == true) {
											qualityControlStatus.disable("#{translate(qualityControl.qualityControl.ribbon.alreadyClosed)}");
										} else {
											qualityControlStatus.enable();
										}
										var allClosed = true;
										for (var i in selectedEntitiesArray) {
											if (selectedEntitiesArray[i].fields.closed == false) {
												allClosed = false;
												break;
											}
										}
										if (allClosed) {
											reportsPdf.enable();
											reportsXls.enable();
										} else {
											reportsPdf.disable("#{translate(qualityControl.qualityControl.ribbon.notAllClosedClosed)}");
											reportsXls.disable("#{translate(qualityControl.qualityControl.ribbon.notAllClosedClosed)}");
										}
									}
								}
							}
							this.addOnChangeListener(listener);
						]]>
					</script>					
					<option type="column" name="number" fields="number" link="true"/>
					<option type="column" name="order" fields="order"
						expression="#order['number']" link="true"/>
					<option type="column" name="controlledQuantity" fields="controlledQuantity" link="true"/>
					<option type="column" name="closed" fields="closed" link="false" width="100"/>
					<option type="order" column="number,order,controlledQuantity,closed" direction="desc"/>
					<option type="correspondingView" value="qualityControls/qualityControlForUnit"/>
					<option type="correspondingComponent" value="form" />
					<option type="searchable" value="number,order,controlledQuantity,closed"/>
					<option type="orderable" value="number,order,controlledQuantity,closed"/>
					<option type="fullscreen" value="true" />
					<option type="multiselect" value="true" />
					<listener event="closeQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl"/>
					<listener event="printQualityControlReport" bean="com.qcadoo.mes.qualityControls.print.QualityControlsReportService" method="printQualityControlReportForOrder" />
				</component>
			</windowTab>
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="addRestrictionToTestGrids" />
	</view>
	
	<!--<view name="qualityControlsForBatch" model="qualityControl" menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction"/>
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{grid}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
				<group name="reports">
					<smallButton name="pdf" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printQualityControlReport,pdf,batch);" state="disabled"/>
					<smallButton name="xls" icon="xlsIcon16.png"
						action="#{grid}.fireEvent(printQualityControlReport,xls,batch);" state="disabled"/>
				</group>
			</ribbon>
			<component type="grid" name="qualityControlsForBatch" reference="grid">
				<script>
					<![CDATA[
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");
						var reportsPdf = #{window}.getRibbonItem("reports.pdf");
						var reportsXls = #{window}.getRibbonItem("reports.xls");
						var listener = {
							onChange: function(selectedEntitiesArray) {
								if (! selectedEntitiesArray || selectedEntitiesArray.length == 0) {
									qualityControlStatus.disable();
									reportsPdf.disable();
									reportsXls.disable();
								} else {
									if (selectedEntitiesArray.length > 1) {
										qualityControlStatus.disable("#{translate(moreThanOneRecordSelected)}");
									} else if (selectedEntitiesArray[0].fields.closed == true) {
										qualityControlStatus.disable("#{translate(qualityControl.qualityControl.ribbon.alreadyClosed)}");
									} else {
										qualityControlStatus.enable();
									}
									var allClosed = true;
									for (var i in selectedEntitiesArray) {
										if (selectedEntitiesArray[i].fields.closed == false) {
											allClosed = false;
											break;
										}
									}
									if (allClosed) {
										reportsPdf.enable();
										reportsXls.enable();
									} else {
										reportsPdf.disable("#{translate(qualityControl.qualityControl.ribbon.notAllClosedClosed)}");
										reportsXls.disable("#{translate(qualityControl.qualityControl.ribbon.notAllClosedClosed)}");
									}
								}
							}
						}
						this.addOnChangeListener(listener);
					]]>
				</script>
				<option type="column" name="number" fields="number" link="true"/>
				<option type="column" name="order" fields="order"
					expression="#order['number']" link="true"/>
				<option type="column" name="batchNr" fields="batchNr" link="true"/>
				<option type="column" name="closed" fields="closed" link="false" width="100"/>
				<option type="order" column="number,order,batchNr,closed" direction="desc"/>
				<option type="correspondingView" value="qualityControls/qualityControlForBatch"/>
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="number,order,batchNr,closed"/>
				<option type="orderable" value="number,order,batchNr,closed"/>
				<option type="fullscreen" value="true" />
				<option type="multiselect" value="true" />
				<listener event="closeQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl"/>
				<listener event="printQualityControlReport" bean="com.qcadoo.mes.qualityControls.print.QualityControlsReportService" method="printQualityControlReportForOrder" />
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />			
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="addRestrictionToQualityControlGrid" />		
	</view>-->
	
	<!--<view name="qualityControlsForOperation" model="qualityControl" menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction"/>
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{grid}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
				<group name="reports">
					<smallButton name="pdf" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printQualityControlReport,pdf,operation);" state="disabled"/>
					<smallButton name="xls" icon="xlsIcon16.png"
						action="#{grid}.fireEvent(printQualityControlReport,xls,operation);" state="disabled"/>
				</group>
			</ribbon>
			<component type="grid" name="qualityControlsForOperation" reference="grid">
				<script>
					<![CDATA[
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");
						var reportsPdf = #{window}.getRibbonItem("reports.pdf");
						var reportsXls = #{window}.getRibbonItem("reports.xls");
						var listener = {
							onChange: function(selectedEntitiesArray) {
								if (! selectedEntitiesArray || selectedEntitiesArray.length == 0) {
									qualityControlStatus.disable();
									reportsPdf.disable();
									reportsXls.disable();
								} else {
									if (selectedEntitiesArray.length > 1) {
										qualityControlStatus.disable("#{translate(moreThanOneRecordSelected)}");
									} else if (selectedEntitiesArray[0].fields.closed == true) {
										qualityControlStatus.disable("#{translate(qualityControl.qualityControl.ribbon.alreadyClosed)}");
									} else {
										qualityControlStatus.enable();
									}
									var allClosed = true;
									for (var i in selectedEntitiesArray) {
										if (selectedEntitiesArray[i].fields.closed == false) {
											allClosed = false;
											break;
										}
									}
									if (allClosed) {
										reportsPdf.enable();
										reportsXls.enable();
									} else {
										reportsPdf.disable("#{translate(qualityControl.qualityControl.ribbon.notAllClosedClosed)}");
										reportsXls.disable("#{translate(qualityControl.qualityControl.ribbon.notAllClosedClosed)}");
									}
								}
							}
						}
						this.addOnChangeListener(listener);
					]]>
				</script>		
				<option type="column" name="number" fields="number" link="true"/>
				<option type="column" name="order" fields="order"
					expression="#order['number']" link="true"/>
				<option type="column" name="operationNumber" fields="operation" link="true" expression="#operation['number']"/>
				<option type="column" name="operationName" fields="operation" link="true" expression="#operation['name']"/>
				<option type="column" name="closed" fields="closed" link="false" width="100"/>
				<option type="order" column="number,order,operationNumber,operationName,closed" direction="desc"/>
				<option type="correspondingView" value="qualityControls/qualityControlForOperation"/>
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="number,order,operationNumber,operationName,closed"/>
				<option type="orderable" value="number,order,operationNumber,operationName,closed"/>
				<option type="fullscreen" value="true" />
				<option type="multiselect" value="true" />
				<listener event="closeQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl"/>
				<listener event="printQualityControlReport" bean="com.qcadoo.mes.qualityControls.print.QualityControlsReportService" method="printQualityControlReportForOrder" />
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />			
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="addRestrictionToQualityControlGrid" />	
	</view>-->
	
		
</qcd:views>