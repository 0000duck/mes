<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 0.2.0

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->

<qcd:views plugin="qualityControls" xmlns:qcd="http://www.qcadoo.com/view">
	<view name="qualityControlsForOrder" model="qualityControl" menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction"/>
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{grid}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
			</ribbon>
			<component type="grid" name="qualityControlsForOrder" reference="grid">
				<script>
					<![CDATA[
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");
						var listener = {
							onChange: function(selectedEntitiesArray) {
								if (! selectedEntitiesArray || selectedEntitiesArray.length == 0) {
									qualityControlStatus.disable();
								} else if (selectedEntitiesArray.length > 1) {
									qualityControlStatus.disable("#{translate(moreThanOneRecordSelected)}");
								} else if (selectedEntitiesArray[0].fields.closed != false) {
									qualityControlStatus.disable("#{translate(qualityControl.qualityControl.ribbon.alreadyClosed)}");
								} else {
									qualityControlStatus.enable();
								}
							}
						}
						this.addOnChangeListener(listener);
					]]>
				</script>
				<option type="column" name="number" fields="number" link="true"/>
				<option type="column" name="order" fields="order"
					expression="#order['number']" link="true"/>
				<option type="column" name="closed" fields="closed" link="false" width="100"/>
				<option type="order" column="number,order,closed" direction="desc"/>
				<option type="correspondingView" value="qualityControls/qualityControlForOrder"/>
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="number,order,closed"/>
				<option type="orderable" value="number,order,closed"/>
				<option type="fullscreen" value="true" />
				<option type="multiselect" value="true" />
				<listener event="closeQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl"/>
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />			
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="addRestrictionToQualityControlGrid" />
	</view>
	<view name="qualityControlForOrder" model="qualityControl">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="navigation"/>
				<group template="formSaveCopyAndRemoveActions"/>
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{form}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
			</ribbon>
			<component type="form" name="qualityControlForOrder" reference="form">
				<script>
					<![CDATA[
						var save = #{window}.getRibbonItem("actions.save");
						var saveBack = #{window}.getRibbonItem("actions.saveBack");
						var saveNew = #{window}.getRibbonItem("actions.saveNew");
						var cancel = #{window}.getRibbonItem("actions.cancel");
						var del = #{window}.getRibbonItem("actions.delete");
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");

						this.addOnChangeListener({
							onSetValue: function(value) {
								var closed = #{closed}.getValue().content.value;
								if (closed && closed == false) {
									qualityControlStatus.enable();
									save.enable();
									saveBack.enable();
									saveNew.enable();
									cancel.enable();
									del.enable();
								} else {
									qualityControlStatus.disable();
									save.disable();
									saveBack.disable();
									saveNew.disable();
									cancel.disable();
									del.disable();									
								}
								
								if (value && value.content && !value.content.entityId) {
									qualityControlStatus.disable();
								}
							}
						});
					]]>
				</script>
				<component type="gridLayout" name="gridsLayout" columns="3" rows="11">
					<layoutElement column="1" row="1">
						<component type="input" name="number" field="number"/>
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="lookup" name="order" reference="order"
							field="order">
							<option type="column" name="number" fields="number" link="true"
								width="300" />
							<option type="column" name="name" fields="name" link="true" />
							<option type="searchable" value="number,name" />
							<option type="orderable" value="number,name" />
							<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name"/>
							<option type="fieldCode" value="number" />
							<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="setQualityControlInstruction"/>
						</component>
					</layoutElement>
					<layoutElement column="1" row="3">
						<component type="select" name="controlResult" field="controlResult" reference="controlResult">
							<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="checkQualityControlResult"/>
						</component>
					</layoutElement>
					<layoutElement column="1" row="4" height="2">
						<component type="textarea" name="comment" field="comment" reference="comment" />
					</layoutElement>
					<layoutElement column="1" row="6">
						<component type="checkbox" name="closed" field="closed" reference="closed" defaultEnabled="false"/>
					</layoutElement>
					<layoutElement column="1" row="7" height="3">
						<component type="textarea" name="controlInstruction" field="controlInstruction" reference="controlInstruction" defaultEnabled="false"/>
					</layoutElement>
					<layoutElement column="1" row="10">
						<component type="input" name="staff" field="staff" reference="staff" defaultEnabled="false">
							<option type="textRepresentationOnDisabled" value="false" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="11">
						<component type="input" name="date" field="date" reference="date" defaultEnabled="false">
							<option type="textRepresentationOnDisabled" value="false" />
						</component>
					</layoutElement>
				</component>
				<component type="input" name="qualityControlType" reference="qualityControlType" field="qualityControlType" defaultVisible="false"/>
				<listener event="closeQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl"/>
				<option type="header" value="true"/>
				<option type="expression" value="#name" />
			</component>
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="checkIfCommentIsRequiredBasedOnResult"/>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="setQualityControlTypeHiddenField"/>
	</view>
	<view name="qualityControlsForUnit" model="qualityControl" menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction"/>
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{grid}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
			</ribbon>
			<component type="grid" name="qualityControlsForUnit" reference="grid">
				<script>
					<![CDATA[
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");
						var listener = {
							onChange: function(selectedEntitiesArray) {
								if (! selectedEntitiesArray || selectedEntitiesArray.length == 0) {
									qualityControlStatus.disable();
								} else if (selectedEntitiesArray.length > 1) {
									qualityControlStatus.disable("#{translate(moreThanOneRecordSelected)}");
								} else if (selectedEntitiesArray[0].fields.closed != false) {
									qualityControlStatus.disable("#{translate(qualityControl.qualityControl.ribbon.alreadyClosed)}");
								} else {
									qualityControlStatus.enable();
								}
							}
						}
						this.addOnChangeListener(listener);
					]]>
				</script>							
				<option type="column" name="number" fields="number" link="true"/>
				<option type="column" name="order" fields="order"
					expression="#order['number']" link="true"/>
				<option type="column" name="controlledQuantity" fields="controlledQuantity" link="true"/>
				<option type="column" name="closed" fields="closed" link="false" width="100"/>
				<option type="order" column="number,order,controlledQuantity,closed" direction="desc"/>
				<option type="correspondingView" value="qualityControls/qualityControlForUnit"/>
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="number,order,controlledQuantity,closed"/>
				<option type="orderable" value="number,order,controlledQuantity,closed"/>
				<option type="fullscreen" value="true" />
				<option type="multiselect" value="true" />
				<listener event="closeQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl"/>
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />			
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="addRestrictionToQualityControlGrid" />		
	</view>
	<view name="qualityControlForUnit" model="qualityControl">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="navigation"/>
				<group template="formSaveCopyAndRemoveActions"/>
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{form}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
			</ribbon>
			<component type="form" name="qualityControlForUnit" reference="form">
				<script>
					<![CDATA[
						var save = #{window}.getRibbonItem("actions.save");
						var saveBack = #{window}.getRibbonItem("actions.saveBack");
						var saveNew = #{window}.getRibbonItem("actions.saveNew");
						var cancel = #{window}.getRibbonItem("actions.cancel");
						var del = #{window}.getRibbonItem("actions.delete");
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");

						this.addOnChangeListener({
							onSetValue: function(value) {
								var closed = #{closed}.getValue().content.value;
								if (closed && closed == false) {
									qualityControlStatus.enable();
									save.enable();
									saveBack.enable();
									saveNew.enable();
									cancel.enable();
									del.enable();
								} else {
									qualityControlStatus.disable();
									save.disable();
									saveBack.disable();
									saveNew.disable();
									cancel.disable();
									del.disable();									
								}
								
								if (value && value.content && !value.content.entityId) {
									qualityControlStatus.disable();
								}
							}
						});
					]]>				
				</script>			
				<component type="gridLayout" name="gridsLayout" columns="3" rows="14">
					<layoutElement column="1" row="1">
						<component type="input" name="number" field="number"/>
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="lookup" name="order" reference="order"
							field="order">
							<option type="column" name="number" fields="number" link="true"
								width="300" />
							<option type="column" name="name" fields="name" link="true" />
							<option type="searchable" value="number,name" />
							<option type="orderable" value="number,name" />
							<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name"/>
							<option type="fieldCode" value="number" />
							<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="setQualityControlInstruction"/>
						</component>
					</layoutElement>
					<layoutElement column="1" row="3" height="2">
						<component type="textarea" name="comment" field="comment" reference="comment" />
					</layoutElement>
					<layoutElement column="1" row="5">
						<component type="checkbox" name="closed" field="closed" reference="closed" defaultEnabled="false"/>
					</layoutElement>				
					<layoutElement column="1" row="6">
						<component type="input" name="controlledQuantity" field="controlledQuantity" />
					</layoutElement>
					<layoutElement column="1" row="7">
						<component type="input" name="takenForControlQuantity" field="takenForControlQuantity" reference="takenForControlQuantity"/>
					</layoutElement>					
					<layoutElement column="1" row="8">
						<component type="input" name="rejectedQuantity" field="rejectedQuantity" reference="rejectedQuantity" />
					</layoutElement>
					<layoutElement column="1" row="9">
						<component type="input" name="acceptedDefectsQuantity" field="acceptedDefectsQuantity" reference="acceptedDefectsQuantity">
							<listener event="onInputChange" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="checkAcceptedDefectsQuantity"/>
						</component>
					</layoutElement>										
					<layoutElement column="1" row="10">
						<component type="input" name="staff" field="staff" reference="staff" defaultEnabled="false">
							<option type="textRepresentationOnDisabled" value="false" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="11">
						<component type="input" name="date" field="date" reference="date" defaultEnabled="false">
							<option type="textRepresentationOnDisabled" value="false" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="12" height="3">
						<component type="textarea" name="controlInstruction" reference="controlInstruction" field="controlInstruction" defaultEnabled="false"/>
					</layoutElement>
				</component>
				<component type="input" name="qualityControlType" reference="qualityControlType" field="qualityControlType" defaultVisible="false"/>
				<listener event="closeQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl"/>
				<option type="header" value="true"/>
				<option type="expression" value="#name" />
			</component>
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="checkIfCommentIsRequiredBasedOnDefects"/>	
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="setQuantitiesToDefaulIfEmpty"/>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="setQualityControlTypeHiddenField"/>
	</view>		
	<view name="qualityControlsForBatch" model="qualityControl" menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction"/>
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{grid}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
			</ribbon>
			<component type="grid" name="qualityControlsForBatch" reference="grid">
				<script>
					<![CDATA[
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");
						var listener = {
							onChange: function(selectedEntitiesArray) {
								if (! selectedEntitiesArray || selectedEntitiesArray.length == 0) {
									qualityControlStatus.disable();
								} else if (selectedEntitiesArray.length > 1) {
									qualityControlStatus.disable("#{translate(moreThanOneRecordSelected)}");
								} else if (selectedEntitiesArray[0].fields.closed != false) {
									qualityControlStatus.disable("#{translate(qualityControl.qualityControl.ribbon.alreadyClosed)}");
								} else {
									qualityControlStatus.enable();
								}
							}
						}
						this.addOnChangeListener(listener);
					]]>
				</script>			
				<option type="column" name="number" fields="number" link="true"/>
				<option type="column" name="order" fields="order"
					expression="#order['number']" link="true"/>
				<option type="column" name="batchNr" fields="batchNr" link="true"/>
				<option type="column" name="closed" fields="closed" link="false" width="100"/>
				<option type="order" column="number,order,batchNr,closed" direction="desc"/>
				<option type="correspondingView" value="qualityControls/qualityControlForBatch"/>
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="number,order,batchNr,closed"/>
				<option type="orderable" value="number,order,batchNr,closed"/>
				<option type="fullscreen" value="true" />
				<option type="multiselect" value="true" />
				<listener event="closeQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl"/>
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />			
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="addRestrictionToQualityControlGrid" />		
	</view>
	<view name="qualityControlForBatch" model="qualityControl">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="navigation"/>
				<group template="formSaveCopyAndRemoveActions"/>
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{form}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
			</ribbon>
			<component type="form" name="qualityControlForBatch" reference="form">
				<script>
					<![CDATA[
						var save = #{window}.getRibbonItem("actions.save");
						var saveBack = #{window}.getRibbonItem("actions.saveBack");
						var saveNew = #{window}.getRibbonItem("actions.saveNew");
						var cancel = #{window}.getRibbonItem("actions.cancel");
						var del = #{window}.getRibbonItem("actions.delete");
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");

						this.addOnChangeListener({
							onSetValue: function(value) {
								var closed = #{closed}.getValue().content.value;
								if (closed && closed == false) {
									qualityControlStatus.enable();
									save.enable();
									saveBack.enable();
									saveNew.enable();
									cancel.enable();
									del.enable();
								} else {
									qualityControlStatus.disable();
									save.disable();
									saveBack.disable();
									saveNew.disable();
									cancel.disable();
									del.disable();									
								}
								if (value && value.content && !value.content.entityId) {
									qualityControlStatus.disable();
								}								
							}
						});
					]]>
				</script>			
				<component type="gridLayout" name="gridsLayout" columns="3" rows="15">
					<layoutElement column="1" row="1">
						<component type="input" name="number" field="number"/>
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="lookup" name="order" reference="order"
							field="order">
							<option type="column" name="number" fields="number" link="true"
								width="300" />
							<option type="column" name="name" fields="name" link="true" />
							<option type="searchable" value="number,name" />
							<option type="orderable" value="number,name" />
							<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name"/>
							<option type="fieldCode" value="number" />
							<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="setQualityControlInstruction"/>
						</component>
					</layoutElement>
					<layoutElement column="1" row="3" height="2">
						<component type="textarea" name="comment" field="comment" reference="comment" />
					</layoutElement>
					<layoutElement column="1" row="5">
						<component type="checkbox" name="closed" field="closed" reference="closed" defaultEnabled="false"/>
					</layoutElement>
					<layoutElement column="1" row="6">
						<component type="input" name="batchNr" field="batchNr"/>
					</layoutElement>					
					<layoutElement column="1" row="7">
						<component type="input" name="controlledQuantity" field="controlledQuantity" />
					</layoutElement>
					<layoutElement column="1" row="8">
						<component type="input" name="takenForControlQuantity" field="takenForControlQuantity" reference="takenForControlQuantity"/>
					</layoutElement>							
					<layoutElement column="1" row="9">
						<component type="input" name="rejectedQuantity" field="rejectedQuantity" reference="rejectedQuantity" />
					</layoutElement>
					<layoutElement column="1" row="10">
						<component type="input" name="acceptedDefectsQuantity" field="acceptedDefectsQuantity" reference="acceptedDefectsQuantity">
							<listener event="onInputChange" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="checkAcceptedDefectsQuantity"/>
						</component>
					</layoutElement>										
					<layoutElement column="1" row="11">
						<component type="input" name="staff" field="staff" reference="staff" defaultEnabled="false">
							<option type="textRepresentationOnDisabled" value="false" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="12">
						<component type="input" name="date" reference="date" field="date" defaultEnabled="false">
							<option type="textRepresentationOnDisabled" value="false" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="13" height="3">
						<component type="textarea" name="controlInstruction" reference="controlInstruction" field="controlInstruction" defaultEnabled="false"/>
					</layoutElement>
				</component>
				<component type="input" name="qualityControlType" reference="qualityControlType" field="qualityControlType" defaultVisible="false"/>
				<listener event="closeQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl"/>
				<option type="header" value="true"/>
				<option type="expression" value="#name" />
			</component>
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="checkIfCommentIsRequiredBasedOnDefects"/>	
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="setQuantitiesToDefaulIfEmpty"/>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="setQualityControlTypeHiddenField"/>
	</view>		
	<view name="qualityControlsForOperation" model="qualityControl" menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction"/>
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{grid}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
			</ribbon>
			<component type="grid" name="qualityControlsForOperation" reference="grid">
				<script>
					<![CDATA[
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");
						var listener = {
							onChange: function(selectedEntitiesArray) {
								if (! selectedEntitiesArray || selectedEntitiesArray.length == 0) {
									qualityControlStatus.disable();
								} else if (selectedEntitiesArray.length > 1) {
									qualityControlStatus.disable("#{translate(moreThanOneRecordSelected)}");
								} else if (selectedEntitiesArray[0].fields.closed != false) {
									qualityControlStatus.disable("#{translate(qualityControl.qualityControl.ribbon.alreadyClosed)}");
								} else {
									qualityControlStatus.enable();
								}
							}
						}
						this.addOnChangeListener(listener);
					]]>
				</script>			
				<option type="column" name="number" fields="number" link="true"/>
				<option type="column" name="order" fields="order"
					expression="#order['number']" link="true"/>
				<option type="column" name="operationNumber" fields="operation" link="true" expression="#operation['number']"/>
				<option type="column" name="operationName" fields="operation" link="true" expression="#operation['name']"/>
				<option type="column" name="closed" fields="closed" link="false" width="100"/>
				<option type="order" column="number,order,operationNumber,operationName,closed" direction="desc"/>
				<option type="correspondingView" value="qualityControls/qualityControlForOperation"/>
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="number,order,operationNumber,operationName,closed"/>
				<option type="orderable" value="number,order,operationNumber,operationName,closed"/>
				<option type="fullscreen" value="true" />
				<option type="multiselect" value="true" />
				<listener event="closeQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl"/>
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />			
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="addRestrictionToQualityControlGrid" />	
	</view>
	<view name="qualityControlForOperation" model="qualityControl">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="navigation"/>
				<group template="formSaveCopyAndRemoveActions"/>
				<group name="controlStatus">
					<bigButton name="closeControl" icon="acceptIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(qualityControl.qualityControl.window.ribbon.status.closeControl.confirm)}")) {
											#{form}.performEvent('closeQualityControl', []);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>				
			</ribbon>
			<component type="form" name="qualityControlForOperation" reference="form">
				<script>
					<![CDATA[
						var save = #{window}.getRibbonItem("actions.save");
						var saveBack = #{window}.getRibbonItem("actions.saveBack");
						var saveNew = #{window}.getRibbonItem("actions.saveNew");
						var cancel = #{window}.getRibbonItem("actions.cancel");
						var del = #{window}.getRibbonItem("actions.delete");
						var qualityControlStatus = #{window}.getRibbonItem("controlStatus.closeControl");

						this.addOnChangeListener({
							onSetValue: function(value) {
								var closed = #{closed}.getValue().content.value;
								if (closed && closed == false) {
									qualityControlStatus.enable();
									save.enable();
									saveBack.enable();
									saveNew.enable();
									cancel.enable();
									del.enable();
								} else {
									qualityControlStatus.disable();
									save.disable();
									saveBack.disable();
									saveNew.disable();
									cancel.disable();
									del.disable();									
								}
								if (value && value.content && !value.content.entityId) {
									qualityControlStatus.disable();
								}								
							}
						});
					]]>
				</script>			
				<component type="gridLayout" name="gridsLayout" columns="3" rows="9">
					<layoutElement column="1" row="1">
						<component type="input" name="number" field="number"/>
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="lookup" name="order" reference="order"
							field="order">
							<option type="column" name="name" fields="name" link="true" />
							<option type="searchable" value="name" />
							<option type="orderable" value="name" />
							<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name"/>
							<option type="fieldCode" value="name" />
							<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="setQualityControlInstruction"/>
						</component>
					</layoutElement>
					<layoutElement column="1" row="3">
						<component type="lookup" name="operation" reference="operation"
							field="operation">
							<option type="column" name="name" fields="name" link="true" />
							<option type="searchable" value="name" />
							<option type="orderable" value="name" />
							<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name"/>
							<option type="fieldCode" value="name" />
						</component>
					</layoutElement>					
					<layoutElement column="1" row="4" >
						<component type="select" name="controlResult" field="controlResult" reference="controlResult">
							<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="checkQualityControlResult"/>
						</component>
					</layoutElement>
					<layoutElement column="1" row="5" height="2">
						<component type="textarea" name="comment" field="comment" reference="comment" />
					</layoutElement>
					<layoutElement column="1" row="7">
						<component type="checkbox" name="closed" field="closed" reference="closed" defaultEnabled="false"/>
					</layoutElement>
					<layoutElement column="1" row="8">
						<component type="input" name="staff" field="staff" reference="staff" defaultEnabled="false">
							<option type="textRepresentationOnDisabled" value="false" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="9">
						<component type="input" name="date" reference="date" field="date" defaultEnabled="false">
							<option type="textRepresentationOnDisabled" value="false" />
						</component>
					</layoutElement>
				</component>
				<component type="input" name="qualityControlType" reference="qualityControlType" field="qualityControlType" defaultVisible="false"/>
				<listener event="closeQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="closeQualityControl"/>
				<option type="header" value="true"/>
				<option type="expression" value="#name" />
			</component>
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="checkIfCommentIsRequiredBasedOnResult"/>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="setOperationAsRequired"/>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="setQualityControlTypeHiddenField"/>
	</view>
	<view name="qualityControlReport" plugin="qualityControls" model="qualityControl" menuAccessible="true">
		<component type="window" name="window">
			<ribbon>
				<group name="reportsForOrder">
					<smallButton name="pdfOrder" icon="pdfIcon16.png"
						action="#{form}.fireEvent(printQualityControlReport,pdf,forOrder);" state="enabled"/>
					<smallButton name="xlsOrder" icon="xlsIcon16.png"
						action="#{form}.fireEvent(printQualityControlReport,xls,forOrder);" state="enabled"/>
				</group>				
				<group name="reportsForUnit">
					<smallButton name="pdfUnit" icon="pdfIcon16.png"
						action="#{form}.fireEvent(printQualityControlReport,pdf,forUnit);" state="enabled"/>
					<smallButton name="xlsUnit" icon="xlsIcon16.png"
						action="#{form}.fireEvent(printQualityControlReport,xls,forUnit);" state="enabled" />
				</group>
				<group name="reportsForBatch">
					<smallButton name="pdfBatch" icon="pdfIcon16.png"
						action="#{form}.fireEvent(printQualityControlReport,pdf,forBatch);" state="enabled"/>
					<smallButton name="xlsBatch" icon="xlsIcon16.png"
						action="#{form}.fireEvent(printQualityControlReport,xls,forBatch);" state="enabled" />
				</group>
				<group name="reportsForOperation">
					<smallButton name="pdfOperation" icon="pdfIcon16.png"
						action="#{form}.fireEvent(printQualityControlReport,pdf,forOperation);" state="enabled"/>
					<smallButton name="xlsOperation" icon="xlsIcon16.png"
						action="#{form}.fireEvent(printQualityControlReport,xls,forOperation);" state="enabled" />
				</group>												
			</ribbon>		
			<component type="form" name="qualityControlReport" reference="form">
				<component type="gridLayout" name="gridLayout" columns="3" rows="2" hasBorders="false">
					<layoutElement column="1" row="1">
						<component type="calendar" name="dateFrom" reference="dateFrom" defaultEnabled="true">
							<!--<listener event="onChange" bean="com.qcadoo.mes.products.OrderService" method="changeDateFrom"/>-->
						</component>						
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="calendar" name="dateTo" reference="dateTo" defaultEnabled="true"/>
					</layoutElement>
				</component>
				<option type="header" value="true"/>
				<option type="expression" value="' '"/>
				<!--<listener event="generateReportForComponent" bean="com.qcadoo.mes.genealogies.print.ReportService" method="generateReportForComponent" />-->
			</component>
		</component>
		<preRenderHook bean="com.qcadoo.mes.qualityControls.QualityControlService" method="enableCalendarsOnRender" />	
	</view>			
</qcd:views>