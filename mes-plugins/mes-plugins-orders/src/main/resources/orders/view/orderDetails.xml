<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 0.4.2

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view" 
	xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
	name="orderDetails"
	modelName="order"
	defaultAuthorizationRole="ROLE_SUPERVISOR">
	
	<component type="window" name="window" reference="window">
		<ribbon>
			<template name="standardFormTemplate" />
			<group name="status">
				<bigButton name="activateOrder" icon="startIcon24.png"
					state="disabled">
					<script>
						<![CDATA[
							this.element.width(100);
							this.addOnChangeListener({
								onClick: function() {
									this.element.width(100);
									if (this.state == "begin") {
										if (window.confirm("#{translate(orders.ordersList.window.ribbon.status.activateOrder.confirm)}")) {
											if(window.canClose()) {
												#{form}.performEvent('changeOrderStateForForm', [true]);
											}
										};
									} else if (this.state == "finish") {
										if (window.confirm("#{translate(orders.ordersList.window.ribbon.status.finishOrder.confirm)}")) {
											if(window.canClose()) {
												#{form}.performEvent('changeOrderStateForForm', [false]);
											}
										};
									}
								}
							});
						]]>
					</script>
				</bigButton>
			</group>
			<!--<group name="report">
				<bigButton name="print" icon="pdfIcon16.png"
					action="#{form}.generateReportForEntity('orders','testReport','html')" state="enabled" />
			</group>-->
		</ribbon>
		<windowTab name="mainTab">
			<component type="form" name="order" reference="form">
				<script>
					<![CDATA[
						var save = #{window}.getRibbonItem("actions.save");
						var saveBack = #{window}.getRibbonItem("actions.saveBack");
						var saveNew = #{window}.getRibbonItem("actions.saveNew");
						var cancel = #{window}.getRibbonItem("actions.cancel");
						var del = #{window}.getRibbonItem("actions.delete");
						var activateOrder = #{window}.getRibbonItem("status.activateOrder");
						
						this.addOnChangeListener({
							onSetValue: function(value) {
								if (! value || ! value.content) {
									return;
								}
								save.enable();
								saveBack.enable();
								saveNew.enable();
								if (! value.content.entityId) {
									cancel.disable();
									del.disable();
									activateOrder.disable();
									return;
								}
								
								cancel.enable();
								del.enable();
								
								var state = #{state}.getValue().content.value;
								if (!state) {
									return;
								}
								if (state == "03done") {
									save.disable("#{translate(orders.order.ribbon.message.stateIsDone)}");
									saveBack.disable("#{translate(orders.order.ribbon.message.stateIsDone)}");
									saveNew.disable("#{translate(orders.order.ribbon.message.stateIsDone)}");
									cancel.disable("#{translate(orders.order.ribbon.message.stateIsDone)}");
									del.disable("#{translate(orders.order.ribbon.message.stateIsDone)}");
									activateOrder.disable();
								} else if (state == "02inProgress") { 
									activateOrder.enable();
									activateOrder.state = "finish";
									activateOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.finishOrder)}");
									activateOrder.setIcon('acceptIcon24.png');
								} else if (state == "01pending") {
									activateOrder.enable();
									activateOrder.state = "begin";
									activateOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.activateOrder)}");
									activateOrder.setIcon('startIcon24.png');
								}
							}
						});
					]]>
				</script>
				<component type="gridLayout" name="gridLayout" columns="3"
					rows="7">
					<layoutElement column="1" row="1">
						<component type="select" name="state" field="state"
							reference="state" defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="input" name="number" reference="number"
							field="number" />
					</layoutElement>
					<layoutElement column="1" row="3" height="2">
						<component type="textarea" name="name" field="name"
							reference="name" hasDescription="true" />
					</layoutElement>
					<!--<layoutElement column="1" row="5">
						<component type="separatorLine" name="line1" />
					</layoutElement>-->
					<layoutElement column="1" row="6">
						<component type="calendar" name="dateFrom" field="dateFrom" reference="dateFrom" >
							<option type="labelWidth" value="50" />
							<option type="withTimePicker" value="true" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="7">
						<component type="calendar" name="dateTo" field="dateTo"
							reference="dateTo">
							<option type="labelWidth" value="50" />
							<option type="withTimePicker" value="true" />
						</component>
					</layoutElement>
					<layoutElement column="2" row="1">
						<component type="lookup" name="product" reference="product"
							field="product">
							<option type="column" name="name" fields="name" link="true"
								width="200" />
							<option type="column" name="ean" fields="ean" />
							<option type="searchable" value="name,ean" />
							<option type="orderable" value="name,ean" />
							<option type="expression"
								value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
							<option type="fieldCode" value="number" />
							<listener event="onSelectedEntityChange" class="com.qcadoo.mes.orders.OrderService"
								method="changeOrderProduct" />
							<listener event="onSelectedEntityChange" class="com.qcadoo.mes.orders.OrderService"
								method="setDefaultNameUsingProduct" />
							<listener event="onSelectedEntityChange"
								class="com.qcadoo.mes.basic.util.UnitService" method="fillProductUnit" />
						</component>
					</layoutElement>
					<layoutElement column="2" row="2">
						<component type="input" name="defaultTechnology"
							reference="defaultTechnology" field="defaultTechnology"
							defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="2" row="3">
						<component type="lookup" name="technology" reference="technology"
							field="technology" source="#{product}.technologies">
							<option type="column" name="name" fields="name" link="true"
								width="300" />
							<option type="searchable" value="name,number" />
							<option type="orderable" value="name,number" />
							<option type="expression"
								value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
							<option type="fieldCode" value="number" />
						</component>
					</layoutElement>
					<!--<layoutElement column="2" row="4">
						<component type="separatorLine" name="line2" />
					</layoutElement>-->
					<layoutElement column="2" row="5">
						<component type="input" name="plannedQuantity"
							reference="plannedQuantity" field="plannedQuantity">
							<option type="labelWidth" value="55" />
						</component>
					</layoutElement>
					<layoutElement column="2" row="6">
						<component type="input" name="doneQuantity" field="doneQuantity">
							<option type="labelWidth" value="55" />
						</component>
					</layoutElement>
					<layoutElement column="2" row="7">
						<component type="input" name="unit" reference="unit"
							defaultEnabled="false">
							<option type="labelWidth" value="55" />
						</component>
					</layoutElement>
				</component>
				<option type="header" value="true" />
				<option type="expression" value="#name + ' - ' + #number" />
				<listener event="changeOrderStateForForm" class="com.qcadoo.mes.orders.OrderService"
					method="changeOrderStateForForm" />
			</component>
		</windowTab>
		<windowTab name="detailsTab">
			<component type="gridLayout" name="detailsTablayout" columns="3" rows="4">
				<layoutElement column="1" row="1">
					<component type="calendar" name="effectiveDateFrom"
						field="#{form}.effectiveDateFrom" reference="effectiveDateFrom"
						defaultEnabled="false">
						<option type="withTimePicker" value="true" />	
					</component>
				</layoutElement>
				<layoutElement column="1" row="2">
					<component type="calendar" name="effectiveDateTo" field="#{form}.effectiveDateTo"
						reference="effectiveDateTo" defaultEnabled="false">
						<option type="withTimePicker" value="true" />
					</component>
				</layoutElement>
				<layoutElement column="1" row="3">
					<component type="input" name="startWorker" field="#{form}.startWorker"
						reference="startWorker" defaultEnabled="false" />
				</layoutElement>
				<layoutElement column="1" row="4">
					<component type="input" name="endWorker" field="#{form}.endWorker"
						reference="endWorker" defaultEnabled="false" />
				</layoutElement>
			</component>
		</windowTab>
	</component>
	<hooks>
		<beforeRender class="com.qcadoo.mes.orders.OrderService" method="generateOrderNumber" />
		<beforeRender class="com.qcadoo.mes.orders.OrderService" method="fillDefaultTechnology" />
		<beforeRender class="com.qcadoo.mes.orders.OrderService" method="disableFormForDoneOrder" />
		<beforeRender class="com.qcadoo.mes.orders.OrderService" method="disableTechnologiesIfProductDoesNotAny" />
		<beforeRender class="com.qcadoo.mes.orders.OrderService" method="setAndDisableState" />
		<beforeRender class="com.qcadoo.mes.basic.util.UnitService" method="fillProductUnitBeforeRender" />
	</hooks>
</view>