<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 1.1.6

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view"
	xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
	name="orderDetails" modelName="order" defaultAuthorizationRole="ROLE_SUPERVISOR">

	<component type="window" name="window" reference="window">
		<ribbon>
			<template name="standardFormTemplate" />
			<group name="status">
				<smallButton name="acceptOrder" icon="startIcon16.png"
					state="disabled">
					<script>
						<![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (this.state == "accept") {
										if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.acceptOrder.confirm)}")) {
											#{form}.performEvent('changeOrderStateToAccepted', []);
										};
									} else if (this.state == "begin") {
										if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.activateOrder.confirm)}")) {
											#{form}.performEvent('changeOrderStateToInProgress', []);
										};
									} else if (this.state == "finish") {
										if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.finishOrder.confirm)}")) {
											#{form}.performEvent('changeOrderStateToCompleted', []);
										};
									} else if (this.state == "restart") {
										if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.restartOrder.confirm)}")) {
											#{form}.performEvent('changeOrderStateToInProgress', []);
										};
									}
								}
							});
							]]>
					</script>
				</smallButton>
				<smallButton name="declineOrder" icon="deleteIcon16.png"
					state="disabled">
					<script>
					<![CDATA[
						this.addOnChangeListener({
							onClick: function() {
								if (this.state == "decline") {
									if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.declineOrder.confirm)}")) {
										#{form}.performEvent('changeOrderStateToDeclined', []);
									};
								} else if (this.state == "abandon") {
									if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.abandonOrder.confirm)}")) {
										#{form}.performEvent('changeOrderStateToAbandoned', []);
									};
								}
							}
						});
							]]>
					</script>
				</smallButton>
				<smallButton name="interruptOrder" icon="pauseIcon16.png"
					state="disabled">
					<script>
						<![CDATA[
						this.addOnChangeListener({
							onClick: function() {
								if (window.confirm("#{translate(orders.ordersPlanningList.window.ribbon.status.interruptOrder.confirm)}")) {
									#{form}.performEvent('changeOrderStateToInterrupted', []);
								};
							}
						});
						]]>
					</script>
				</smallButton>
			</group>
			<group name="export">
				<bigButton name="print" icon="pdfIcon24.png"
					action="#{form}.generateReportForEntity('orders','order','pdf')" />
			</group>
			<group name="orderParameters">
				<bigButton name="orderParameters" icon="settingsIcon24.png" state="disabled">
					<script>
						<![CDATA[
							this.addOnChangeListener({
								onClick: function() {
										if(window.canClose()) {
											#{form}.performEvent('showOrderParameters', []);
										}
								}
							});		
							#{form}.addOnChangeListener({
								onSetValue: function(value) {
									if (! value || ! value.content) {
										return;
									}
									if (! value.content.entityId) {
										this.disable();
									} else {
										this.enable();
									}
								}
							});					
						]]>
					</script>	
				</bigButton>
			</group>
		</ribbon>
		<windowTab name="mainTab">
			<component type="form" name="order" reference="form">
				<script>
					<![CDATA[
					var save = #{window}.getRibbonItem("actions.save");
					var saveBack = #{window}.getRibbonItem("actions.saveBack");
					var saveNew = #{window}.getRibbonItem("actions.saveNew");
					var cancel = #{window}.getRibbonItem("actions.cancel");
					var del = #{window}.getRibbonItem("actions.delete");
					var acceptOrder = #{window}.getRibbonItem("status.acceptOrder");
					var declineOrder = #{window}.getRibbonItem("status.declineOrder");
					var interruptOrder = #{window}.getRibbonItem("status.interruptOrder");
					this.addOnChangeListener({
					onSetValue: function(value) {
						if (! value || ! value.content) {
						return;
						}
						save.enable();
						saveBack.enable();
						saveNew.enable();
						if (! value.content.entityId) {
							cancel.disable();
							del.disable();
							acceptOrder.disable();
							declineOrder.disable();
							interruptOrder.disable();
							return;
						}
						cancel.enable();
						del.enable();
						var state = #{state}.getValue().content.value;
						var externalNumber = #{externalNumber}.getValue().content.value;
						var externalSynchronized = #{externalSynchronized}.getValue().content.value;
						if (!state) {
							return;
						}
						if (state == "01pending") {
							acceptOrder.enable();
							acceptOrder.state = "accept";
							acceptOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.acceptOrder)}");
							acceptOrder.setIcon('startIcon16.png');
							declineOrder.enable();
							declineOrder.state = "decline";
							declineOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.declineOrder)}");
							declineOrder.setIcon('deleteIcon16.png');
							interruptOrder.disable();
						} else if (state == "02accepted") {
							acceptOrder.enable();
							acceptOrder.state = "begin";
							acceptOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.activateOrder)}");
							acceptOrder.setIcon('startIcon16.png');
							declineOrder.enable();
							declineOrder.state = "decline";
							declineOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.declineOrder)}");
							declineOrder.setIcon('deleteIcon16.png');
							interruptOrder.disable();
						} else if (state == "03inProgress") {
							acceptOrder.enable();
							acceptOrder.state = "finish";
							acceptOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.finishOrder)}");
							acceptOrder.setIcon('acceptIcon16.png');
							declineOrder.enable();
							declineOrder.state = "abandon";
							declineOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.abandonOrder)}");
							declineOrder.setIcon('deleteIcon16.png');
							interruptOrder.enable();
						} else if (state == "06interrupted"){
							acceptOrder.enable();
							acceptOrder.state = "restart";
							acceptOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.restartOrder)}");
							acceptOrder.setIcon('acceptIcon16.png');
							declineOrder.enable();
							declineOrder.state = "abandon";
							declineOrder.setLabel("#{translate(orders.orderDetails.window.ribbon.status.abandonOrder)}");
							declineOrder.setIcon('deleteIcon16.png');
							interruptOrder.disable();
						} else {
							save.disable();
							saveBack.disable();
							saveNew.disable();
							cancel.disable();
							del.disable();
							acceptOrder.disable();
							declineOrder.disable();
							interruptOrder.disable();
						}
						
						if(externalSynchronized == '0') {
							save.disable("#{translate(orders.order.ribbon.message.orderIsExternal)}");
							saveBack.disable("#{translate(orders.order.ribbon.message.orderIsExternal)}");
							saveNew.disable("#{translate(orders.order.ribbon.message.orderIsExternal)}");
							cancel.disable("#{translate(orders.order.ribbon.message.orderIsExternal)}");
							del.disable("#{translate(orders.order.ribbon.message.orderIsExternal)}");
							acceptOrder.disable();
							declineOrder.disable();
							interruptOrder.disable();
						}
						if(externalNumber != undefined && externalNumber != '') {
							del.disable("#{translate(orders.order.ribbon.message.orderIsExternal)}");
						}
						}
					});
					]]>
				</script>
				<component type="gridLayout" name="gridLayout" columns="3"
					rows="9">
					<layoutElement column="1" row="1">
						<component type="input" name="number" reference="number"
							field="number">
							<option type="alignment" value="right" />
						</component>
						<component type="hidden" name="externalNumber" field="externalNumber"
							reference="externalNumber" />
						<component type="hidden" name="externalSynchronized"
							field="externalSynchronized" reference="externalSynchronized" />
					</layoutElement>
					<layoutElement column="1" row="2" height="2">
						<component type="textarea" name="name" field="name" 
							reference="name" hasDescription="true" />
					</layoutElement>
					<layoutElement column="1" row="4" height="2">
						<component type="textarea" name="description" field="description"
							reference="description" />
					</layoutElement>
					<layoutElement column="1" row="6">
						<component type="lookup" name="company" reference="company"
							field="company">
							<option type="column" name="name" fields="name" />
							<option type="searchable" value="name,number" />
							<option type="orderable" value="name,number" />
							<option type="expression"
								value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
							<option type="fieldCode" value="number" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="7">
						<component type="calendar" name="dateFrom" field="dateFrom"
							reference="dateFrom">
							<option type="labelWidth" value="50" />
							<option type="withTimePicker" value="true" />
							<listener event="onChange" method="copyStartDate"  class="com.qcadoo.mes.orders.listeners.OrderDetailsListeners" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="8">
						<component type="calendar" name="dateTo" field="dateTo"
							reference="dateTo">
							<option type="labelWidth" value="50" />
							<option type="withTimePicker" value="true" />
							<listener event="onChange" method="copyEndDate"  class="com.qcadoo.mes.orders.listeners.OrderDetailsListeners" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="9">
						<component type="calendar" name="deadline" field="deadline"
							reference="deadline">
							<option type="labelWidth" value="50" />
							<option type="withTimePicker" value="true" />
						</component>
					</layoutElement>
					<layoutElement column="2" row="1">
						<component type="lookup" name="product" reference="product"
							field="product">
							<option type="column" name="name" fields="name" link="true"
								width="200" />
							<option type="column" name="ean" fields="ean" />
							<option type="searchable" value="name,ean" />
							<option type="orderable" value="name,ean" />
							<option type="expression"
								value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
							<option type="fieldCode" value="number" />
							<listener event="onSelectedEntityChange" class="com.qcadoo.mes.orders.OrderService"
								method="changeOrderProduct" />
							<listener event="onSelectedEntityChange" class="com.qcadoo.mes.basic.util.UnitService"
								method="fillProductUnit" />
							<listener event="onSelectedEntityChange" class="com.qcadoo.mes.orders.OrderService"
								method="setDefaultNameUsingTechnology" />
						</component>
					</layoutElement>
					<layoutElement column="2" row="2">
						<component type="input" name="defaultTechnology"
							reference="defaultTechnology" field="defaultTechnology"
							defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="2" row="3">
						<component type="lookup" name="technology" reference="technology"
							field="technology" source="#{product}.technologies">
							<option type="column" name="name" fields="name" link="true"
								width="300" />
							<option type="searchable" value="name,number" />
							<option type="orderable" value="name,number" />
							<option type="expression"
								value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
							<option type="fieldCode" value="number" />
							<listener event="onSelectedEntityChange" class="com.qcadoo.mes.orders.OrderService"
								method="setDefaultNameUsingTechnology" />
						</component>
					</layoutElement>
					<layoutElement column="2" row="4">
						<component type="lookup" name="productionLine" reference="productionLine"
							field="productionLine">
							<option type="column" name="name" fields="name" link="true"
								width="300" />
							<option type="searchable" value="name,number" />
							<option type="orderable" value="name,number" />
							<option type="expression"
								value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
							<option type="fieldCode" value="number" />
							
							<listener event="onSelectedEntityChange" class="com.qcadoo.mes.orders.OrderService"
								method="checkIfProductionLineSupportsTechnology" />
						</component>
					</layoutElement>
					<layoutElement column="2" row="5">
						<component type="select" name="state" field="state"
							reference="state" defaultVisible="false" />
					</layoutElement>
					<layoutElement column="2" row="6">
						<component type="input" name="plannedQuantity"
							reference="plannedQuantity" field="plannedQuantity">
							<option type="labelWidth" value="55" />
							<option type="alignment" value="right" />
						</component>
					</layoutElement>
					<layoutElement column="2" row="7">
						<component type="input" name="doneQuantity" field="doneQuantity"
							reference="doneQuantity" hasDescription="true">
							<option type="labelWidth" value="55" />
							<option type="alignment" value="right" />
<!-- 							<option type="hasDescription" value="true"/> -->
						</component>
					</layoutElement>
					<layoutElement column="2" row="8">
						<component type="input" name="unit" reference="unit"
							defaultEnabled="false">
							<option type="labelWidth" value="55" />
							<option type="alignment" value="right" />
						</component>
					</layoutElement>
				</component>
				<option type="header" value="true" />
				<option type="expression" value="#name + ' - ' + #number + ' - ' + '@orders.order.state.value.' + #state" />
				<listener event="changeOrderStateToAccepted"
					class="com.qcadoo.mes.orders.states.OrderStatesService" method="changeOrderStateToAccepted" />
				<listener event="changeOrderStateToInProgress"
					class="com.qcadoo.mes.orders.states.OrderStatesService" method="changeOrderStateToInProgress" />
				<listener event="changeOrderStateToCompleted"
					class="com.qcadoo.mes.orders.states.OrderStatesService" method="changeOrderStateToCompleted" />
				<listener event="changeOrderStateToDeclined"
					class="com.qcadoo.mes.orders.states.OrderStatesService" method="changeOrderStateToDeclined" />
				<listener event="changeOrderStateToAbandoned"
					class="com.qcadoo.mes.orders.states.OrderStatesService" method="changeOrderStateToAbandoned" />
				<listener event="changeOrderStateToInterrupted"
					class="com.qcadoo.mes.orders.states.OrderStatesService" method="changeOrderStateToInterrupted" />
				<listener event="showOrderParameters" method="showOrderParameters" class="com.qcadoo.mes.orders.listeners.OrderDetailsListeners" />
				<listener event="save"	class="com.qcadoo.mes.orders.OrderService" 	method="compareDeadlineAndDateTo" />
			</component>
		</windowTab>
		<windowTab name="detailsTab">
		    <component type="gridLayout" name="detailsTablayout"
				columns="3" rows="1">
				<layoutElement column="1" row="1">
			   		 <component type="borderLayout" name="startDates">
						<component type="gridLayout" name="startDatesGridLayout"
							columns="1" rows="3" reference="startDatesGridLayout">
							<layoutElement column="1" row="1">
								<component type="calendar" name="plannedDateFrom"
									field="#{form}.dateFrom" reference="plannedDateFrom"
									defaultEnabled="false">
									<option type="withTimePicker" value="true" />
									<listener event="onChange" method="copyStartDate"  class="com.qcadoo.mes.orders.listeners.OrderDetailsListeners" />
								</component>
							</layoutElement>
							<layoutElement column="1" row="2">
									<component type="calendar" name="correctedDateFrom"
									field="#{form}.correctedDateFrom" reference="correctedDateFrom"
									defaultEnabled="false">
									<option type="withTimePicker" value="true" />
								</component>
							</layoutElement>
							<layoutElement column="1" row="3">
									<component type="calendar" name="effectiveDateFrom"
									field="#{form}.effectiveDateFrom" reference="effectiveDateFrom"
									defaultEnabled="false">
									<option type="withTimePicker" value="true" />
								</component>
							</layoutElement>
						</component>
							<option type="label" value="startDatesLabel" />
					</component>
					 <component type="borderLayout" name="causeOfPlannedDateFromCorrection">
						<component type="gridLayout" name="causeOfPlannedDateFromCorrectionGridLayout"
							columns="1" rows="3" reference="causeOfPlannedDateFromCorrectionGridLayout">
							<layoutElement column="1" row="1">
								<component type="select" name="reasonTypeCorrectionDateFrom"
									field="#{form}.reasonTypeCorrectionDateFrom" reference="reasonTypeCorrectionDateFrom"
									defaultEnabled="false">
								</component>
							</layoutElement>
							<layoutElement column="1" row="2" height="2">
									<component type="textarea" name="commentReasonTypeCorrectionDateFrom"
									field="#{form}.commentReasonTypeCorrectionDateFrom" reference="commentReasonTypeCorrectionDateFrom"
									defaultEnabled="false">
								</component>
							</layoutElement>
						</component>
						<option type="label" value="causeOfPlannedDateFromCorrectionLabel" />
					</component>	
					 <component type="borderLayout" name="causeDeviationsOfEffectiveStart">
						<component type="gridLayout" name="causeDeviationsOfEffectiveStartGridLayout"
							columns="1" rows="3" reference="causeDeviationsOfEffectiveStartGridLayout">
							<layoutElement column="1" row="1">
								<component type="select" name="reasonTypeDeviationsOfEffectiveStart"
									reference="reasonTypeDeviationsOfEffectiveStart" field="#{form}.reasonTypeDeviationsOfEffectiveStart"
									defaultEnabled="false">
								</component>
							</layoutElement>
							<layoutElement column="1" row="2" height="2">
									<component type="textarea" name="commentReasonTypeDeviationsOfEffectiveStart"
								 	 reference="commentReasonTypeDeviationsOfEffectiveStart"
									defaultEnabled="false">
								</component>
							</layoutElement>
						</component>
						<option type="label" value="causeDeviationsOfEffectiveStartLabel" />
					</component>	
					</layoutElement>
					<layoutElement column="2" row="1">	
					<component type="borderLayout" name="endDates">
						<component type="gridLayout" name="endDatesGridLayout"
							columns="1" rows="3" reference="endDatesGridLayout">
							<layoutElement column="1" row="1">
								<component type="calendar" name="plannedDateTo"
									field="#{form}.dateTo" reference="plannedDateTo"
									defaultEnabled="false">
									<option type="withTimePicker" value="true" />
									<listener event="onChange" method="copyEndDate"  class="com.qcadoo.mes.orders.listeners.OrderDetailsListeners" />
								</component>
							</layoutElement>
							<layoutElement column="1" row="2">
									<component type="calendar" name="correctedDateTo"
									field="#{form}.correctedDateTo" reference="correctedDateTo"
									defaultEnabled="false">
									<option type="withTimePicker" value="true" />
								</component>
							</layoutElement>
							<layoutElement column="1" row="3">
								<component type="calendar" name="effectiveDateTo" field="#{form}.effectiveDateTo"
									reference="effectiveDateTo" defaultEnabled="false">
									<option type="withTimePicker" value="true" />
								</component>
							</layoutElement>
						</component>
						<option type="label" value="endDatesLabel" />
					</component>
					 <component type="borderLayout" name="causeOfPlannedDateToCorrection">
						<component type="gridLayout" name="causeOfPlannedDateToCorrectionGridLayout"
							columns="1" rows="3" reference="causeOfPlannedDateToCorrectionGridLayout">
							<layoutElement column="1" row="1">
								<component type="select" name="reasonTypeCorrectionDateTo"
									field="#{form}.reasonTypeCorrectionDateTo" reference="reasonTypeCorrectionDateTo"
									defaultEnabled="false">
								</component>
							</layoutElement>
							<layoutElement column="1" row="2" height="2">
									<component type="textarea" name="commentReasonTypeCorrectionDateTo"
									field="#{form}.commentReasonTypeCorrectionDateTo" reference="commentReasonTypeCorrectionDateTo"
									defaultEnabled="false">
								</component>
							</layoutElement>
						</component>
						<option type="label" value="causeOfPlannedDateToCorrectionLabel" />
					</component>
					 <component type="borderLayout" name="causeDeviationsOfEffectiveEnd">
						<component type="gridLayout" name="causeDeviationsOfEffectiveEndGridLayout"
							columns="1" rows="3" reference="causeDeviationsOfEffectiveEndGridLayout">
							<layoutElement column="1" row="1">
								<component type="select" name="reasonTypeDeviationsOfEffectiveEnd"
									reference="reasonTypeDeviationsOfEffectiveEnd" field="#{form}.reasonTypeDeviationsOfEffectiveEnd"
									defaultEnabled="false">
								</component>
							</layoutElement>
							<layoutElement column="1" row="2" height="2">
									<component type="textarea" name="commentReasonTypeDeviationsOfEffectiveEnd"
								 	 reference="commentReasonTypeDeviationsOfEffectiveEnd"
									defaultEnabled="false">
								</component>
							</layoutElement>
						</component>
						<option type="label" value="causeDeviationsOfEffectiveEndLabel" />
					</component>	
				</layoutElement>
			</component>
		</windowTab>
		<windowTab name="history">
			<component type="grid" name="loggings" reference="grid"
				source="#{form}.loggings">
				<option type="column" name="dateAndTime" fields="dateAndTime" link="true"/>
				<option type="column" name="currentState" fields="currentState"
					expression="'@orders.order.state.value.' + #currentState" link="true" />
				<option type="column" name="worker" fields="worker" />
				<option type="column" name="reasonType" fields="reasonType" />
				<option type="column" name="comment" fields="comment" />
				<option type="order" column="dateAndTime" direction="desc" />
				<option type="searchable" value="dateAndTime,previousState,currentState" />
				<option type="orderable" value="dateAndTime,previousState,currentState" />
				<option type="correspondingView" value="orders/loggingDetails" />
				<option type="correspondingComponent" value="form" />
			</component>
		</windowTab>
	</component>
	<hooks>
		<beforeRender class="com.qcadoo.mes.orders.OrderService"
			method="fillProductionLine" />
		<beforeRender class="com.qcadoo.mes.orders.OrderService"
			method="generateOrderNumber" />
		<beforeRender class="com.qcadoo.mes.orders.OrderService"
			method="fillDefaultTechnology" />
		<beforeRender class="com.qcadoo.mes.orders.OrderService"
			method="disableFieldOrder" />
		<beforeRender class="com.qcadoo.mes.orders.OrderService"
			method="disableTechnologiesIfProductDoesNotAny" />
		<beforeRender class="com.qcadoo.mes.orders.OrderService"
			method="setAndDisableState" />
		<beforeRender class="com.qcadoo.mes.basic.util.UnitService"
			method="fillProductUnitBeforeRender" />
		<beforeRender class="com.qcadoo.mes.orders.OrderService"
			method="disableOrderFormForExternalItems" />
		<beforeRender class="com.qcadoo.mes.orders.states.OrderStatesService"
			method="setFieldsRequired" />
		<beforeRender class="com.qcadoo.mes.orders.hooks.OrderLogginsDetailsHooks"
			method="fillReasonTypeDeviationsOfEffectiveStart" />
		<beforeRender class="com.qcadoo.mes.orders.hooks.OrderLogginsDetailsHooks"
			method="fillReasonTypeDeviationsOfEffectiveEnd" />
		<beforeRender class="com.qcadoo.mes.orders.hooks.OrderDetailsHooks"
		    method="enabledFieldForSpecificOrderState"/>
	</hooks>
</view>