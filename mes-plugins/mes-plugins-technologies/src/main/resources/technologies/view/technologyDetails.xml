<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 1.2.0

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view"
	xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
	name="technologyDetails" modelName="technology">

	<component type="window" name="window" reference="window">
		
		<ribbon>
			<template name="standardFormTemplate" />
			<group name="status">
				<smallButton name="acceptTechnology" icon="startIcon16.png" state="disabled" action="#{form}.changeState(acceptTechnology);" />
				<smallButton name="cancelTechnology" icon="deleteIcon16.png" state="disabled" action="#{form}.changeState(cancelTechnology);" />
				<smallButton name="checkTechnology" icon="startIcon16.png" state="disabled" action="#{form}.changeState(checkTechnology);" />
			</group>
			<group name="reports">
				<smallButton name="pdf" icon="pdfIcon16.png" action="#{form}.fireEvent(printTechnologyDetailsReport,pdf);" state="enabled" />
				<smallButton name="xls" icon="xlsIcon16.png" action="#{form}.fireEvent(printTechnologyDetailsReport,xls);" state="enabled" />
			</group>
		</ribbon>
		
		<windowTab name="mainTab">
			<component type="form" name="technology" reference="form">
				<listener event="changeState" class="com.qcadoo.mes.technologies.states.TechnologyStateChangeViewClient" method="changeState" />
				<script>
					<![CDATA[
						this.changeState = function(eventPerformer, ribbonItemName) {
							var ribbonItem = #{window}.getRibbonItem("status." + ribbonItemName);
							var newState = ribbonItem.forState;
							if (window.confirm(ribbonItem.confirmMessage)) {
								#{form}.fireEvent(eventPerformer, 'changeState', [newState]);
							}
						}
					
						#{form}.addOnChangeListener({
							onSetValue: function() {
								var itemNames = ["reports.pdf", "reports.xls", "status.acceptTechnology", "status.cancelTechnology", "status.checkTechnology"]; 
								var isSaved = (#{form}.getValue().content && #{form}.getValue().content.entityId);
								
								for (var elementKey in itemNames) {
									var ribbonItem = #{window}.getRibbonItem(itemNames[elementKey]);
									if (isSaved) {
										ribbonItem.enable();
									} else {
										ribbonItem.disable();
									}
								}
								
								if (isSaved && #{state}.getValue().content && #{state}.getValue().content.value) {
									#{state}.updateRibbon(#{state}.getValue().content.value);
								}
							}
						});
					]]>
				</script>
				<component type="gridLayout" name="gridsLayout" columns="3" rows="5" hasBorders="false">
					<layoutElement column="1" row="1">
						<component type="checkbox" name="master" field="master" reference="master" hasDescription="true"/>
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="input" name="number" field="number" reference="number" hasDescription="true">
							<option type="alignment" value="right" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="3" height="2">
						<component type="textarea" name="name" field="name" reference="name" hasDescription="true" />
					</layoutElement>
					<layoutElement column="2" row="1">
						<component type="lookup" name="product" field="product" reference="product">
							<option type="column" name="name" fields="name" link="true" width="200" />
							<option type="column" name="ean" fields="ean" />
							<option type="searchable" value="name,ean" />
							<option type="orderable" value="name,ean" />
							<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
							<option type="fieldCode" value="number" />
							<listener event="onSelectedEntityChange" class="com.qcadoo.mes.technologies.TechnologyService" method="generateTechnologyNumber" />
							<listener event="onSelectedEntityChange" class="com.qcadoo.mes.technologies.TechnologyService" method="generateTechnologyName" />
						</component>
					</layoutElement>
					<layoutElement column="2" row="2" height="2">
						<component type="textarea" name="description" field="description" />
					</layoutElement>
					<layoutElement column="2" row="4">
						<component type="lookup" name="technologyGroup" field="technologyGroup" reference="technologyGroup">
							<option type="column" name="name" fields="name" link="true" width="200" />
							<option type="searchable" value="name,number" />
							<option type="orderable" value="name,number" />
							<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
							<option type="fieldCode" value="number" />
						</component>
					</layoutElement>
				</component>
				
				<component type="select" name="state" field="state" reference="state" hasLabel="false" defaultVisible="false">
					<script>
						<![CDATA[
							this.addOnChangeListener({
								onSetValue: function(newValue) {
									if (!newValue || !newValue.content) {
										return;
									}
									updateRibbon(newValue.content.value);
									toggleEditable(newValue.content.value);
								}
							});
							
							var onSetValueListener = {
								onSetValue: function(value) {
									if (#{form}.getValue().content && #{form}.getValue().content.entityId) {
										toggleEditable(#{state}.getValue().content.value); 
									} else {
										this.setEnabled(false, true);
									}
								}
							};
							
							function toggleEditable(state) {
								var isDraft = state == "01draft";
								var isAccepted = state == "02accepted";
								var isDeclined = state == "03declined";
								var isOutdated = state == "04outdated";
								var isChecked = state == "05checked";
								
								#{window}.setEnabled(isDraft, true);
								#{master}.setEnabled(isDraft, false);
								#{master}.setEnabled(isAccepted, true);
								
								var toggleRibbonItems = ["actions.save", "actions.saveBack", "actions.saveNew", "actions.cancel"]; 
								for (var elementKey in toggleRibbonItems) {
									var ribbonItemName = toggleRibbonItems[elementKey];
									var ribbonItem = #{window}.getRibbonItem(ribbonItemName);
									
									if (!ribbonItem) {
										continue;
									}
									
									if (isDraft || isAccepted) {
										ribbonItem.enable();
									} else {
										ribbonItem.disable("#{translate(technologies.technologyDetails.window.ribbon.status.canNotModifyTechnology)}");
									}
								}
								if (!isAccepted) {
									#{window}.getRibbonItem("actions.delete").enable();
								} else {
									#{window}.getRibbonItem("actions.delete").disable();
								}
							}
							
							function updateRibbon(state) {
								var acceptState = #{window}.getRibbonItem("status.acceptTechnology");
								var cancelState = #{window}.getRibbonItem("status.cancelTechnology");
								var checkState = #{window}.getRibbonItem("status.checkTechnology");
									
								acceptState.disable();
								acceptState.forState="02accepted";
								acceptState.confirmMessage = "#{translate(technologies.technologyDetails.window.ribbon.status.confirm.accepted)}";
								
								checkState.disable();
								checkState.forState="05checked";
								checkState.confirmMessage = "#{translate(technologies.technologyDetails.window.ribbon.status.confirm.checked)}";
								checkState.setLabel("#{translate(technologies.technologyDetails.window.ribbon.status.checkTechnology)}");

								cancelState.disable();
								cancelState.forState="03declined";
								cancelState.confirmMessage = "#{translate(technologies.technologyDetails.window.ribbon.status.confirm.declined)}";
								cancelState.setLabel("#{translate(technologies.technologyDetails.window.ribbon.status.declineTechnology)}");
								
								if (state == "01draft") {
									acceptState.enable();
									cancelState.enable();
									checkState.enable();
								} else if (state == "02accepted") {
									checkState.disable();
									cancelState.enable();
									cancelState.forState="04outdated";
									cancelState.confirmMessage = "#{translate(technologies.technologyDetails.window.ribbon.status.confirm.outdated)}";
									cancelState.setLabel("#{translate(technologies.technologyDetails.window.ribbon.status.outdateTechnology)}");
								} else if (state == "03declined") {
								} else if (state == "04outdated") {
									cancelState.setLabel("#{translate(technologies.technologyDetails.window.ribbon.status.outdateTechnology)}");
								} else if( state == "05checked"){
									cancelState.enable();
									checkState.enable();
									checkState.forState="01draft"
									checkState.confirmMessage = "#{translate(technologies.technologyDetails.window.ribbon.status.confirm.draft)}";
									checkState.setLabel("#{translate(technologies.technologyDetails.window.ribbon.status.draftTechnology)}");
									acceptState.enable();
								}else{
									cancelState.enable();
								}
							}
							this.updateRibbon = updateRibbon;
						]]>
					</script>
				</component>

				<option type="header" value="true" />
				<option type="expression" value="#name" />
				
				<listener event="printTechnologyDetailsReport" class="com.qcadoo.mes.technologies.print.TechnologiesReportService" method="printTechnologyDetailsReport" />
			</component>
		</windowTab>
		<windowTab name="treeTab">
			<component type="gridLayout" name="gridsLayout" columns="2"
				rows="8" hasBorders="false">
				<layoutElement column="1" row="1" height="1">
					<component type="label" name="description">
						<option type="labelStyle" value="text" />
					</component>
				</layoutElement>
				<layoutElement column="1" row="2" height="7">
					<component type="tree" name="technologyTree" reference="technologyTree"
						field="#{form}.operationComponents">
						<dataType name="operation">
							<option type="nodeLabelExpression" value="#nodeNumber + ' &lt;span class=&quot;grey&quot;&gt;' + #operation['number'] + ' &lt;/span&gt;' + #operation['name']" />
							<option type="correspondingView" value="technologies/technologyOperationComponentDetails" />
							<option type="correspondingComponent" value="form" />
							<option type="correspondingViewInModal" value="false" />
							<option type="nodeIcon" value="/technologies/public/css/icons/operationIcon16.png" />
							<option type="newIcon" value="/technologies/public/css/icons/newOperationIcon16.png" />
						</dataType>
						<dataType name="referenceTechnology">
							<option type="nodeLabelExpression" value="#nodeNumber + ' &lt;span class=&quot;grey&quot;&gt;' + #referenceTechnology['number'] + '&lt;/span&gt; ' + #referenceTechnology['name']" />
							<option type="correspondingView" value="technologies/technologyReferenceTechnologyComponentDetails" />
							<option type="correspondingComponent" value="form" />
							<option type="correspondingViewInModal" value="true" />
							<option type="nodeIcon" value="/technologies/public/css/icons/technologyIcon16.png" />
							<option type="newIcon" value="/technologies/public/css/icons/newTechnologyIcon16.png" />
							<option type="canHaveChildren" value="false" />
						</dataType>
						<option type="selectableWhenDisabled" value="true" />
						<listener event="select" class="com.qcadoo.mes.technologies.TechnologyService" method="loadProductsForReferencedTechnology" />
						<listener event="select" class="com.qcadoo.mes.technologies.listeners.TechnologyDetailsListeners" method="setGridEditable" />
					</component>
				</layoutElement>
				<layoutElement column="2" row="1" height="4">
					<component type="grid" name="outProducts" reference="outProducts"
						source="#{technologyTree}.operationProductOutComponents" defaultEnabled="false">
						<option type="column" name="number" fields="product"
							expression="#product['number']" link="true" width="100" />
						<option type="column" name="name" fields="product"
							expression="#product['name']" link="true" width="200" />
						<option type="column" name="quantity" fields="quantity" width="100" />
						<option type="column" name="unit" fields="product" expression="#product['unit']" link="false" width="70" />
						<option type="order" column="number" direction="desc" />
						<option type="correspondingView" value="technologies/operationProductOutComponentDetails" />
						<option type="correspondingComponent" value="form" />
						<option type="correspondingViewInModal" value="true" />
						<option type="searchable" value="number,name,quantity,unit" />
						<option type="orderable" value="number,name,quantity,unit" />
						<option type="paginable" value="false" />
						<option type="creatable" value="true" />
						<option type="deletable" value="true" />
						<option type="fullscreen" value="true" />
						<option type="multiselect" value="true" />
						<option type="filtersDefaultVisible" value="false" />
					</component>
				</layoutElement>
				<layoutElement column="2" row="5" height="4">
					<component type="grid" name="inProducts" reference="inProducts"
						source="#{technologyTree}.operationProductInComponents" defaultEnabled="false" >
						<option type="column" name="number" fields="product"
							expression="#product['number']" link="true" width="100" />
						<option type="column" name="name" fields="product"
							expression="#product['name']" link="true" width="200" />
						<option type="column" name="quantity" fields="quantity"
							width="100" />
						<option type="column" name="unit" fields="product"
							expression="#product['unit']" link="false" width="70" />
						<option type="order" column="number" direction="desc" />
						<option type="correspondingView" value="technologies/operationProductInComponentDetails" />
						<option type="correspondingComponent" value="form" />
						<option type="correspondingViewInModal" value="true" />
						<option type="searchable" value="number,name,quantity,unit" />
						<option type="orderable" value="number,name,quantity,unit" />
						<option type="paginable" value="false" />
						<option type="creatable" value="true" />
						<option type="deletable" value="true" />
						<option type="fullscreen" value="true" />
						<option type="multiselect" value="true" />
						<option type="filtersDefaultVisible" value="false" />
					</component>
				</layoutElement>
			</component>
		</windowTab>
		<windowTab name="history">
			<component type="grid" name="loggings" reference="grid" source="#{form}.stateChanges">
				<option type="column" name="dateAndTime" fields="dateAndTime" />
				<option type="column" name="previousState" fields="sourceState" />
				<option type="column" name="currentState" fields="targetState" />
				<option type="column" name="shift" fields="shift" expression="#shift != null ? #shift['name'] : ''" />
				<option type="column" name="worker" fields="worker" />
				<option type="order" column="dateAndTime" direction="asc" />
				<option type="searchable" value="dateAndTime,sourceState,targetState" />
				<option type="orderable" value="dateAndTime,sourceState,targetState" />
			</component>
		</windowTab>
	</component>
	<hooks>
		<beforeRender class="com.qcadoo.mes.technologies.TechnologyTreeNumberingHooks"
			method="rebuildTreeNumbering" />
		<beforeRender class="com.qcadoo.mes.technologies.hooks.TechnologyDetailsViewHooks"
			method="filterStateChangeHistory" />
		<beforeRender class="com.qcadoo.mes.technologies.hooks.TechnologyDetailsViewHooks"
			method="setTreeTabEditable" />	
		<beforeRender class="com.qcadoo.mes.technologies.listeners.TechnologyDetailsListeners" 
			method="setGridEditable" />
	</hooks>
</view>
