<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 1.1.1

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view" 
	xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
	name="contractorDetails" 
	modelName="contractor">
	
	<component type="window" name="window" reference="window">
		<ribbon>
			<template name="standardFormTemplate" />
		</ribbon>
		<component type="form" name="contractor" reference="form">
			<script>
				<![CDATA[
					var save = #{window}.getRibbonItem("actions.save");
					var saveBack = #{window}.getRibbonItem("actions.saveBack");
					var saveNew = #{window}.getRibbonItem("actions.saveNew");
					var cancel = #{window}.getRibbonItem("actions.cancel");
					var del = #{window}.getRibbonItem("actions.delete");
					
					this.addOnChangeListener({
						onSetValue: function(value) {
							if (! value || ! value.content) {
								return;
							}
							save.enable();
							saveBack.enable();
							saveNew.enable();
							
							if (! value.content.entityId) {
								cancel.disable();
								del.disable();
								return;
							}
							
							cancel.enable();
							del.enable();
							
							var externalNumber = #{externalNumber}.getValue().content.value;
							
							if(externalNumber != undefined && externalNumber != '') {
								save.disable("#{translate(basic.contractor.ribbon.message.contractorIsExternal)}");
								saveBack.disable("#{translate(basic.contractor.ribbon.message.contractorIsExternal)}");
								saveNew.disable("#{translate(basic.contractor.ribbon.message.contractorIsExternal)}");
								cancel.disable("#{translate(basic.contractor.ribbon.message.contractorIsExternal)}");
								del.disable("#{translate(basic.contractor.ribbon.message.contractorIsExternal)}");
							}
						}
					});
				]]>
			</script>
			<component type="gridLayout" name="gridLayout" columns="3" rows="3">
				<layoutElement column="1" row="1">
					<component type="input" name="number" field="number">
						<option type="alignment" value="right" />
					</component>
					<component type="hidden" name="externalNumber" field="externalNumber" reference="externalNumber" />
				</layoutElement>
				<layoutElement column="1" row="2" height="2">
					<component type="textarea" name="name" field="name" />
				</layoutElement>				
			</component>
			<option type="header" value="true" />
			<option type="expression" value="#name" />
		</component>
	</component>
	<hooks>
		<beforeRender class="com.qcadoo.mes.basic.ContractorService" method="disableContractorFormForExternalItems" />
	</hooks>
</view>