<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo Framework
    Version: 1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view"
      xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
      name="eventsList" modelName="maintenanceEvent" modelPlugin="cmmsMachineParts" menuAccessible="true">

    <component type="window" name="window" reference="window">

        <ribbon>
            <group name="customActions">
                <bigButton name="addFailure" icon="newIcon24.png" action="#{window}.fireEvent(addEvent,01failure);"
                           state="enabled"/>
                <bigButton name="addIssue" icon="newIcon24.png" action="#{window}.fireEvent(addEvent,02issue);"
                           state="enabled"/>
                <bigButton name="addProposal" icon="newIcon24.png" action="#{window}.fireEvent(addEvent,03proposal);"
                           state="enabled"/>
            </group>
            <template name="standardGridTemplate" excludeItems="actions.copy,actions.new"/>
            <group name="status">
                <smallButton name="startEvent" icon="startIcon16.png"
                             state="disabled" action="#{grid}.changeState(startEvent);"/>
                <smallButton name="revokeEvent" icon="deleteIcon16.png"
                             state="disabled" action="#{grid}.changeState(revokeEvent);"/>
                <smallButton name="planEvent" icon="startIcon16.png"
                             state="disabled" action="#{grid}.changeState(planEvent);"/>
                <smallButton name="closeEvent" icon="acceptIcon16.png"
                             state="disabled" action="#{grid}.changeState(closeEvent);"/>
            </group>
        </ribbon>

        <component type="grid" name="grid" reference="grid">
            <script>
                <![CDATA[
					var toggleRibbonItems = ["actions.delete"];

					this.addOnChangeListener({
						onChange: function(selectedEntitiesArray) {
							if (selectedEntitiesArray && selectedEntitiesArray.length > 0) {
								updateRibbon(selectedEntitiesArray);
							} else {
								resetRibbon();
							}
						}
					});

					this.changeState = function(eventPerformer, ribbonItemName, entityId) {
						var ribbonItem = #{window}.getRibbonItem("status." + ribbonItemName);
						var newState = ribbonItem.forState;
						if (window.confirm(ribbonItem.confirmMessage)) {
							if (window.canClose()) {
								#{grid}.fireEvent(eventPerformer, 'changeState', [newState]);
							}
						}
					}

					function resetRibbon() {
						for (var elementKey in toggleRibbonItems) {
							getRibbonItem(toggleRibbonItems[elementKey]).disable();
						}
						getRibbonItem("status.startEvent").disable();
						getRibbonItem("status.revokeEvent").disable();
						getRibbonItem("status.planEvent").disable();
						getRibbonItem("status.closeEvent").disable();
					}

					function updateRibbon(selectedEntitiesArray) {
						var locked = shouldLockStatusRibbonItems(selectedEntitiesArray);
						var lockedMessage = "#{translate(cmmsMachineParts.eventsList.window.ribbon.status.cantModifyEvent)}";
						var differentStatesMessage = "#{translate(cmmsMachineParts.eventsList.window.ribbon.status.differentStates)}";
						var differentStates = statesAreDifferent(selectedEntitiesArray);

						for (var elementKey in toggleRibbonItems) {
							var ribbonItem = getRibbonItem(toggleRibbonItems[elementKey]);
							if (!ribbonItem) {
								continue;
							}

							if (locked && differentStates) {
								ribbonItem.disable(differentStatesMessage);
							} else if (locked) {
								ribbonItem.disable(lockedMessage);
							} else {
								ribbonItem.enable();
							}
						}

						if (!differentStates) {
							var state = selectedEntitiesArray[0].fields.state;
						}

						if (state && (state == "01new" || state == "05revoked")) {
							getRibbonItem("actions.delete").enable();
						}
						else {
						    getRibbonItem("actions.delete").disable();
						}

                            var startEvent = #{window}.getRibbonItem("status.startEvent");
                            var planEvent = #{window}.getRibbonItem("status.planEvent");
                            var revokeEvent = #{window}.getRibbonItem("status.revokeEvent");
                            var closeEvent = #{window}.getRibbonItem("status.closeEvent");

							startEvent.forState="02inProgress";
							startEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.inProgress)}";
							startEvent.setLabel("#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.startEvent)}");

							closeEvent.forState="04closed";
							closeEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.closed)}";

							revokeEvent.forState="05revoked";
							revokeEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.revoked)}";

							planEvent.forState="06planned";
							planEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.planned)}";


							if (state == "01new") {
								startEvent.enable();
								planEvent.enable();
								revokeEvent.enable();
								closeEvent.disable();
								startEvent.setLabel("#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.startEvent)}");
								startEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.inProgress)}";
							} else if (state == "02inProgress") {

								startEvent.enable();
								planEvent.enable();
								revokeEvent.enable();
								closeEvent.disable();

							    startEvent.forState="03edited";
							    startEvent.confirmMessage = "#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.confirm.edited)}";
							    startEvent.setLabel("#{translate(cmmsMachineParts.maintenanceEventDetails.window.ribbon.status.stopEvent)}");

							} else if (state == "05revoked" || state == "06planned" || state == "04closed") {
								startEvent.disable();
								planEvent.disable();
								revokeEvent.disable();
								closeEvent.disable();
							} else if ( state == "03edited") {
								startEvent.disable();
								planEvent.disable();
								revokeEvent.disable();
								closeEvent.enable();
							}
							else {
							    startEvent.disable();
								planEvent.disable();
								revokeEvent.disable();
								closeEvent.disable();
							}
					}

					function getRibbonItem(ribbonPath) {
						return #{window}.getRibbonItem(ribbonPath);
					}

					function shouldLockStatusRibbonItems(selectedEntitiesArray) {
						return selectedEntitiesArray[0].fields.state == '05revoked' || selectedEntitiesArray[0].fields.state == '06planned' || selectedEntitiesArray[0].fields.state == '04closed' ||
								statesAreDifferent(selectedEntitiesArray);
					}

					function statesAreDifferent(selectedEntitiesArray) {
						if (selectedEntitiesArray.length < 2) {
							return false;
						}
						for (var i = 1; i < selectedEntitiesArray.length; i++) {
							if (selectedEntitiesArray[i-1].fields.state != selectedEntitiesArray[i].fields.state) {
								return true;
							}
						}
						return false;
					}

				]]>
            </script>
            <option type="column" name="number" fields="number" link="true"/>
            <option type="column" name="type" fields="type" link="true"/>
            <option type="column" name="factory" fields="factory" expression="#factory['number']" link="true"/>
            <option type="column" name="division" fields="division" expression="#division['number']" link="true"/>
            <option type="column" name="productionLine" fields="productionLine" expression="#productionLine['number']"
                    link="true"/>
            <option type="column" name="workstation" fields="workstation" expression="#workstation['number']"
                    link="true"/>
            <option type="column" name="subassembly" fields="subassembly" expression="#subassembly['number']"
                    link="true"/>
            <option type="column" name="faultType" fields="faultType" expression="#faultType['name']"
                    link="false"/>
            <option type="column" name="description" fields="description" link="true"/>
            <option type="column" name="createDate" fields="createDate" link="false"/>
            <option type="column" name="createUser" fields="createUser" link="false"/>
            <option type="column" name="personReceiving" fields="personReceivingName"
                    link="false"/>

            <option type="column" name="state" fields="state" link="false"/>


            <option type="searchable"
                    value="number,type,factory,division,productionLine,workstation,subassembly,description,createDate,createUser,personReceiving,faultType,state"/>
            <option type="orderable"
                    value="number,type,factory,division,productionLine,workstation,subassembly,description,createDate,createUser,personReceiving,faultType,state"/>
            <option type="multiselect" value="true"/>
            <option type="fullscreen" value="true"/>

            <option type="correspondingView" value="cmmsMachineParts/maintenanceEventDetails"/>
            <option type="correspondingComponent" value="form"/>

            <option type="order" column="number" direction="desc"/>
            <option type="fullscreen" value="true"/>

            <listener event="changeState"
                      class="com.qcadoo.mes.cmmsMachineParts.states.MaintenanceEventStateChangeViewClient"
                      method="changeState"/>
        </component>


        <option type="fixedHeight" value="true"/>
        <option type="header" value="false"/>

        <listener event="addEvent" method="addEvent"
                  class="com.qcadoo.mes.cmmsMachineParts.listeners.EventsListListeners"/>

    </component>


</view>