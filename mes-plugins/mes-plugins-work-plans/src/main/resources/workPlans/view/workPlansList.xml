<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 0.4.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view" 
	xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
	name="workPlansList"
	modelName="workPlan"
	menuAccessible="true">
	
	<component type="window" name="window" reference="window">
		<ribbon>
			<template name="standardGridTemplate" />
			<group name="exportWorker">
				<smallButton name="pdfWorker" icon="pdfIcon16.png"
					action="#{grid}.fireEvent(printWorkPlan,pdf,ForWorker);" state="disabled" />
				<smallButton name="xlsWorker" icon="xlsIcon16.png"
					action="#{grid}.fireEvent(printWorkPlan,xls,ForWorker);" state="disabled" />
			</group>
			<group name="exportMachine">
				<smallButton name="pdfMachine" icon="pdfIcon16.png"
					action="#{grid}.fireEvent(printWorkPlan,pdf,ForMachine);" state="disabled" />
				<smallButton name="xlsMachine" icon="xlsIcon16.png"
					action="#{grid}.fireEvent(printWorkPlan,xls,ForMachine);" state="disabled" />
			</group>
			<group name="exportProduct">
				<smallButton name="pdfProduct" icon="pdfIcon16.png"
					action="#{grid}.fireEvent(printWorkPlan,pdf,ForProduct);" state="disabled" />
				<smallButton name="xlsProduct" icon="xlsIcon16.png"
					action="#{grid}.fireEvent(printWorkPlan,xls,ForProduct);" state="disabled" />
			</group>
		</ribbon>
		<component type="grid" name="workPlans" reference="grid">
			<option type="column" name="name" fields="name" link="true"
				width="300" />
			<option type="column" name="generated" fields="generated"
				link="false" width="100" />
			<option type="column" name="worker" fields="worker" width="200" />
			<option type="order" column="name" direction="asc" />
			<option type="correspondingView" value="workPlans/workPlanDetails" />
			<option type="correspondingComponent" value="form" />
			<option type="searchable" value="name,generated,worker" />
			<option type="orderable" value="name,generated,worker" />
			<option type="fullscreen" value="true" />
			<option type="multiselect" value="true" />
			<listener event="printWorkPlan" class="com.qcadoo.mes.workPlans.WorkPlanService"
				method="printWorkPlan" />
			<script>
				<![CDATA[
					var pdfWorker = #{window}.getRibbonItem("exportWorker.pdfWorker");
					var xlsWorker = #{window}.getRibbonItem("exportWorker.xlsWorker");
					var pdfMachine = #{window}.getRibbonItem("exportMachine.pdfMachine");
					var xlsMachine = #{window}.getRibbonItem("exportMachine.xlsMachine");
					var pdfProduct = #{window}.getRibbonItem("exportProduct.pdfProduct");
					var xlsProduct = #{window}.getRibbonItem("exportProduct.xlsProduct");
					var listener = {
						onChange: function(selectedEntitiesArray) {
							if (!selectedEntitiesArray || selectedEntitiesArray.length == 0) {
								pdfWorker.disable();
								xlsWorker.disable();
								pdfMachine.disable();
								xlsMachine.disable();
								pdfProduct.disable();
								xlsProduct.disable();
							} else if (selectedEntitiesArray.length > 1) {
								pdfWorker.disable("#{translate(moreThanOneRecordSelected)}");
								xlsWorker.disable("#{translate(moreThanOneRecordSelected)}");
								pdfMachine.disable("#{translate(moreThanOneRecordSelected)}");
								xlsMachine.disable("#{translate(moreThanOneRecordSelected)}");
								pdfProduct.disable("#{translate(moreThanOneRecordSelected)}");
								xlsProduct.disable("#{translate(moreThanOneRecordSelected)}");	
							} else if (selectedEntitiesArray[0].fields.generated == '0') {
								pdfWorker.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
								xlsWorker.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
								pdfMachine.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
								xlsMachine.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
								pdfProduct.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
								xlsProduct.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");								
							} else {
								pdfWorker.enable();
								xlsWorker.enable();
								pdfMachine.enable();
								xlsMachine.enable();
								pdfProduct.enable();
								xlsProduct.enable();
							}
						}
					}
					this.addOnChangeListener(listener);
				]]>
			</script>
		</component>
		<option type="fixedHeight" value="true" />
		<option type="header" value="false" />
	</component>
	<hooks>
		<beforeRender class="com.qcadoo.mes.workPlans.WorkPlanService"
			method="setGridGenerateButtonState" />
	</hooks>
</view>