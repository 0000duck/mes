<?xml version="1.0" encoding="UTF-8"?>

<view xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view" 
	xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
	name="workPlanDetails"
	modelName="workPlan">
	
	<component type="window" name="window" reference="window">
		<ribbon>
			<group template="navigation" />
			<group template="formSaveCopyAndRemoveActions" />
			<group name="generate">
				<bigButton name="generate" icon="generateIcon24.png"
					action="#{form}.fireEvent(generateWorkPlan);" state="disabled" />
			</group>
			<group name="exportWorker">
				<smallButton name="pdfWorker" icon="pdfIcon16.png"
					action="#{form}.fireEvent(printWorkPlan,pdf,ForWorker);" state="disabled" />
				<smallButton name="xlsWorker" icon="xlsIcon16.png"
					action="#{form}.fireEvent(printWorkPlan,xls,ForWorker);" state="disabled" />
			</group>
			<group name="exportMachine">
				<smallButton name="pdfMachine" icon="pdfIcon16.png"
					action="#{form}.fireEvent(printWorkPlan,pdf,ForMachine);" state="disabled" />
				<smallButton name="xlsMachine" icon="xlsIcon16.png"
					action="#{form}.fireEvent(printWorkPlan,xls,ForMachine);" state="disabled" />
			</group>
			<group name="exportProduct">
				<smallButton name="pdfProduct" icon="pdfIcon16.png"
					action="#{form}.fireEvent(printWorkPlan,pdf,ForProduct);" state="disabled" />
				<smallButton name="xlsProduct" icon="xlsIcon16.png"
					action="#{form}.fireEvent(printWorkPlan,xls,ForProduct);" state="disabled" />
			</group>
		</ribbon>
		<component type="form" name="workPlan" reference="form">
			<script>
				<![CDATA[
					var saveRibbonItem = #{window}.getRibbonItem("actions.save");
					var copyRibbonItem = #{window}.getRibbonItem("actions.copy");
					var pdfWorker = #{window}.getRibbonItem("exportWorker.pdfWorker");
					var xlsWorker = #{window}.getRibbonItem("exportWorker.xlsWorker");
					var pdfMachine = #{window}.getRibbonItem("exportMachine.pdfMachine");
					var xlsMachine = #{window}.getRibbonItem("exportMachine.xlsMachine");
					var pdfProduct = #{window}.getRibbonItem("exportProduct.pdfProduct");
					var xlsProduct = #{window}.getRibbonItem("exportProduct.xlsProduct");
					
					var containsAtLeastOneOrder = false;
					var entityExists = false;
					
					this.addOnChangeListener({
						onSetValue: function(value) {
							if (!value || !value.content) {
								return;
							}
							if (value.content.entityId) {
								entityExists = true;
							} else {
								entityExists = false;
							}
							updateRibbon();
						}
					});
					#{workPlanComponents}.addOnChangeListener({
						onSetValue: function(value) {
							if (value.content.totalEntities > 0) {
								containsAtLeastOneOrder = true;
							} else {
								containsAtLeastOneOrder = false;
							}
							updateRibbon();
						}
					});
					
					function updateRibbon() {
						if (entityExists) {
							var isGeneratedCheckboxValue = #{generated}.getValue();
							copyRibbonItem.enable();
							if (isGeneratedCheckboxValue && isGeneratedCheckboxValue.content.value == "1") {
								pdfWorker.enable();
								xlsWorker.enable();
								pdfMachine.enable();
								xlsMachine.enable();
								pdfProduct.enable();
								xlsProduct.enable();
								saveRibbonItem.disable("#{translate(orders.ribbon.message.recordAlreadyGenerated)}");
							} else {
								pdfWorker.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
								xlsWorker.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
								pdfMachine.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
								xlsMachine.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
								pdfProduct.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
								xlsProduct.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
								saveRibbonItem.enable();
							}
						} else {
							copyRibbonItem.disable("#{translate(recordNotCreated)}");
							pdfWorker.disable("#{translate(recordNotCreated)}");
							xlsWorker.disable("#{translate(recordNotCreated)}");
							pdfMachine.disable("#{translate(recordNotCreated)}");
							xlsMachine.disable("#{translate(recordNotCreated)}");
							pdfProduct.disable("#{translate(recordNotCreated)}");
							xlsProduct.disable("#{translate(recordNotCreated)}");
							saveRibbonItem.enable();
						}
					}
				]]>
			</script>
			<component type="gridLayout" name="gridLayout" columns="3"
				rows="5">
				<layoutElement column="1" row="1">
					<component type="checkbox" name="generated" reference="generated"
						field="generated" defaultEnabled="false">
						<option type="textRepresentationOnDisabled" value="false" />
					</component>
				</layoutElement>
				<layoutElement column="1" row="2">
					<component type="input" name="date" field="date"
						reference="date" defaultEnabled="false">
						<option type="textRepresentationOnDisabled" value="false" />
					</component>
				</layoutElement>
				<layoutElement column="1" row="3">
					<component type="input" name="worker" field="worker"
						reference="worker" defaultEnabled="false">
						<option type="textRepresentationOnDisabled" value="false" />
					</component>
				</layoutElement>
				<layoutElement column="1" row="4" height="2">
					<component type="textarea" name="name" reference="name"
						field="name" />
				</layoutElement>
				<layoutElement column="2" row="1" height="5" width="2">
					<component type="grid" name="workPlanComponents"
						reference="workPlanComponents" source="#{form}.orders">
						<option type="column" name="number" fields="order"
							expression="#order['number']" width="50" />
						<option type="column" name="name" fields="order"
							expression="#order['name']" />
						<option type="order" column="number" direction="desc" />
						<option type="correspondingView" value="workPlans/workPlanComponentDetails" />
						<option type="correspondingComponent" value="form" />
						<option type="correspondingViewInModal" value="true" />
						<option type="paginable" value="false" />
						<option type="multiselect" value="true" />
						<option type="height" value="200" />
						<option type="width" value="350" />
						<option type="creatable" value="true" />
						<option type="deletable" value="true" />
					</component>
				</layoutElement>
			</component>
			<option type="header" value="true" />
			<option type="expression" value="#name" />
			<listener event="printWorkPlan" class="com.qcadoo.mes.workPlans.WorkPlanService"
				method="printWorkPlan" />
			<listener event="generateWorkPlan" class="com.qcadoo.mes.workPlans.WorkPlanService"
				method="generateWorkPlan" />
		</component>
	</component>
	<hooks>
		<beforeRender class="com.qcadoo.mes.workPlans.WorkPlanService"
			method="disableFormForExistingWorkPlan" />
		<beforeRender class="com.qcadoo.mes.workPlans.WorkPlanService"
			method="setGenerateButtonState" />
	</hooks>
</view>