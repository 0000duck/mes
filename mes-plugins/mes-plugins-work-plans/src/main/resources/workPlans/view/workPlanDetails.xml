<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 1.1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view" 
	xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
	name="workPlanDetails"
	modelName="workPlan">
	
	<component type="window" name="window" reference="window">
		<ribbon>
			<template name="standardFormTemplate" />
			<group name="generate">
				<bigButton name="generate" icon="generateIcon24.png"
					action="#{form}.fireEvent(generateWorkPlan);" state="enabled" />
			</group>
			<group name="exportWorkPlan">
				<bigButton name="printWorkPlan" icon="pdfIcon24.png"
					action="#{form}.fireEvent(printWorkPlan,pdf);" state="enabled" />
			</group>
		</ribbon>
		<component type="form" name="workPlan" reference="form">
			<script>
				<![CDATA[
					var saveRibbonItem = #{window}.getRibbonItem("actions.save");
					var copyRibbonItem = #{window}.getRibbonItem("actions.copy");
					var printWorkPlan = #{window}.getRibbonItem("exportWorkPlan.printWorkPlan");
					var generate = #{window}.getRibbonItem("generate.generate");
					var saveBack = #{window}.getRibbonItem("actions.saveBack");
					var saveNew = #{window}.getRibbonItem("actions.saveNew");
					
					var containsAtLeastOneOrder = false;
					var entityExists = false;
					
					this.addOnChangeListener({
						onSetValue: function(value) {
							if (!value || !value.content) {
								return;
							}
							if (value.content.entityId) {
								entityExists = true;
							} else {
								entityExists = false;
							}
							updateRibbon();
						}
					});
					
					#{workPlanComponents}.addOnChangeListener({
						onSetValue: function(value) {
							if (value.content.totalEntities > 0) {
								containsAtLeastOneOrder = true;
							} else {
								containsAtLeastOneOrder = false;
							}
							updateRibbon();
						}
					});
					
					function updateRibbon() {
						if (entityExists) {
							copyRibbonItem.enable();

							var isGeneratedCheckboxValue = #{generated}.getValue();
							var generated = false;
							
							if (isGeneratedCheckboxValue && isGeneratedCheckboxValue.content.value == "1") {
								generated = true;
							}
							
							if (containsAtLeastOneOrder && !generated) {
								enableGeneration(true);
							} else {
								enableGeneration(false);
							}
						} else {
							copyRibbonItem.disable("#{translate(recordNotCreated)}");
							generate.disable("#{translate(recordNotCreated)}");
						}
					}
					
					function enableGeneration(enable) {
						if (enable) {
							generate.enable();
							saveBack.enable();
							saveNew.enable();
							printWorkPlan.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
							saveRibbonItem.enable();
						} else {
							if (containsAtLeastOneOrder) {
								generate.disable("#{translate(orders.ribbon.message.recordAlreadyGenerated)}");
								saveBack.disable();
								saveNew.disable();
								printWorkPlan.enable();
								saveRibbonItem.disable();
							} else {	
								generate.disable("#{translate(orders.ribbon.message.noOrders)}");
								saveBack.disable();
								saveNew.disable();
								printWorkPlan.disable("#{translate(orders.ribbon.message.recordNotGenerated)}");
								saveRibbonItem.enable();
							}
						}
					}
					
				]]>
			</script>
			<component type="gridLayout" name="gridLayout" columns="3"
				rows="10">
				<layoutElement column="1" row="1">
					<component type="checkbox" name="generated" reference="generated"
						field="generated" defaultEnabled="false">
						<option type="textRepresentationOnDisabled" value="false" />
					</component>
				</layoutElement>
				<layoutElement column="1" row="2">
					<component type="input" name="date" field="date"
						reference="date" defaultEnabled="false">
						<option type="textRepresentationOnDisabled" value="false" />
					</component>
				</layoutElement>
				<layoutElement column="1" row="3">
					<component type="input" name="worker" field="worker"
						reference="worker" defaultEnabled="false">
						<option type="textRepresentationOnDisabled" value="false" />
					</component>
				</layoutElement>
				<layoutElement column="1" row="4" height="2">
					<component type="textarea" name="name" reference="name"
						field="name" />
				</layoutElement>
				<layoutElement column="1" row="6">
					<component type="select" name="type" reference="type"
						field="type" />
				</layoutElement>
				<layoutElement column="2" row="1" height="5" width="2">
					<component type="lookup" name="order" reference="orderLookup" field="orders" defaultVisible="false" persistent="false" hasLabel="false">
						<option type="column" name="name" fields="name" link="true"
							width="200" />
						<option type="searchable" value="number,name" />
						<option type="orderable" value="number,name" />
						<option type="expression"
							value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
						<option type="fieldCode" value="number" />
						<option type="multiselect" value="true" />
					</component>
					<component type="grid" name="workPlanComponents"
						reference="workPlanComponents" source="#{form}.orders">
						<option type="column" name="number" fields="number" width="50" />
						<option type="column" name="name" fields="name" />
						
						<option type="searchable" value="number,name" />
						<option type="orderable" value="number,name" />
					
						<option type="order" column="number" direction="desc" />
						
						<option type="paginable" value="false" />
						<option type="multiselect" value="true" />
						<option type="creatable" value="true" />
						<option type="deletable" value="true" />
						
						<option type="weakRelation" value="true" />
						<option type="correspondingLookup" value="orderLookup" />
					</component>
				</layoutElement>
				<layoutElement column="2" row="6" width="2">
					<component type="checkbox" name="dontPrintOrdersInWorkPlans" field="#{form}.dontPrintOrdersInWorkPlans" reference="dontPrintOrdersInWorkPlans">
						<option type="labelWidth" value="50" />
						<option type="align" value="left" />
					</component>
				</layoutElement>
				<layoutElement column="2" row="7" height="4" width="2">
					<component type="grid" name="columnsForOrders" source="#{form}.workPlanOrderColumns" reference="columnsForOrders" >
						<option type="column" name="name" fields="columnForOrders" expression="'@' + #columnForOrders.get('name')" />
						
						<option type="searchable" value="name" />
						<option type="orderable" value="name" />
						
						<option type="order" column="succession" direction="desc" />
						
						<option type="correspondingView" value="workPlans/workPlanOrderColumnDetails" />
						<option type="correspondingComponent" value="form" />
						<option type="correspondingViewInModal" value="true" />
						
						<option type="creatable" value="true" />
						<option type="deletable" value="true" />
						<option type="fullscreen" value="true" />
						<option type="multiselect" value="true" />
					</component>
				</layoutElement>
			</component>
			
			<option type="header" value="true" />
			<option type="expression" value="#name" />
			
			<listener event="printWorkPlan" class="com.qcadoo.mes.workPlans.hooks.WorkPlanViewHooks"
				method="printWorkPlan" />
			<listener event="generateWorkPlan" class="com.qcadoo.mes.workPlans.hooks.WorkPlanViewHooks"
				method="generateTestWorkPlan" />
		</component>
	</component>
	<hooks>
		<beforeRender class="com.qcadoo.mes.workPlans.hooks.WorkPlanViewHooks"
			method="disableFormForGeneratedWorkPlan" />
	</hooks>
</view>