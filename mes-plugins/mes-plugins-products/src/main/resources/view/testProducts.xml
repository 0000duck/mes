<qcd:views plugin="products" xmlns:qcd="http://www.qcadoo.com/view">
	<view name="testEntities" model="testEntity1" menuAccessible="true">
		<component type="window" name="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction"/>
			</ribbon>
			<component type="grid" name="testEntity1" reference="grid">
				<option type="column" name="number" fields="number" link="true"
					width="200" />
				<option type="column" name="name" fields="name" link="true"
					width="300" />
				<option type="order" column="number" direction="desc"/>
				<option type="correspondingView" value="products/testEntity" />
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="name,number" />
				<option type="orderable" value="name,number" />
				<option type="fullscreen" value="true" />
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />
		</component>
	</view>
	<view name="testEntity" model="testEntity1">
		<component type="window" name="window">
			<ribbon>
				<group template="navigation"/>
				<group template="formSaveCopyAndRemoveActions"/>
			</ribbon>
			<component type="form" name="product" reference="form">
				<component type="gridLayout" name="gridLayout" columns="3" rows="2" fixedRowHeight="false">
					<layoutElement column="1" row="1">
						<component type="textarea" name="name" field="name" hasDescription="true" />
						<component type="input" name="number" field="number" />
					</layoutElement>
					<layoutElement column="2" row="1">
						<component type="input" name="ean" field="ean" />
						<component type="select" name="category" field="category" />
						<component type="input" name="unit" field="unit" />
					</layoutElement>
					<layoutElement column="1" row="2" width="2">
						<component type="awesomeDynamicList" name="entitiesList" source="#{form}.testEntity2">
							<components>
								<component type="gridLayout" name="gridLayout" columns="3" rows="1" fixedRowHeight="false">
									<layoutElement column="1" row="1">
										<component type="input" name="number" field="number" />
									</layoutElement>
									<layoutElement column="2" row="1">
										<component type="calendar" name="dateFrom" field="dateFrom" />
									</layoutElement>
									<layoutElement column="3" row="1">
										<component type="lookup" name="product" field="product">
											<option type="column" name="name" fields="name" link="true"
												width="300" />
											<option type="column" name="category" fields="category" />
											<option type="searchable" value="name,category" />
											<option type="orderable" value="name,category" />
											<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name"/>
											<option type="fieldCode" value="number" />
										</component>
									</layoutElement>
								</component>
							</components>
						</component>
					</layoutElement>
				</component>
				<option type="expression" value="#name" />
				<option type="header" value="false" />
			</component>
		</component>
	</view>
	<view name="testOrders" model="order" menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction"/>
				<group name="export">
					<smallButton name="print" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printOrder,pdf);" state="disabled" />
				</group>
				<group name="exportMaterialReq">
					<smallButton name="pdf" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printMaterialReqForOrder,pdf);" state="disabled" />
					<smallButton name="xls" icon="xlsIcon16.png"
						action="#{grid}.fireEvent(printMaterialReqForOrder,xls);" state="disabled" />
				</group>
				<group name="exportWorker">
					<smallButton name="pdfWorker" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printWorkPlanForOrder,pdf,ForWorker);" state="disabled" />
					<smallButton name="xlsWorker" icon="xlsIcon16.png"
						action="#{grid}.fireEvent(printWorkPlanForOrder,xls,ForWorker);" state="disabled" />
				</group>
				<group name="exportMachine">
					<smallButton name="pdfMachine" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printWorkPlanForOrder,pdf,ForMachine);" state="disabled" />
					<smallButton name="xlsMachine" icon="xlsIcon16.png"
						action="#{grid}.fireEvent(printWorkPlanForOrder,xls,ForMachine);" state="disabled" />
				</group>
				<group name="exportProduct">
					<smallButton name="pdfProduct" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printWorkPlanForOrder,pdf,ForProduct);" state="disabled" />
					<smallButton name="xlsProduct" icon="xlsIcon16.png"
						action="#{grid}.fireEvent(printWorkPlanForOrder,xls,ForProduct);" state="disabled" />
				</group>
			</ribbon>
			<component type="grid" name="orders" reference="grid">
				<script>
					<![CDATA[
						var print = #{window}.getRibbonItem("export.print");
						var pdfMaterialReq = #{window}.getRibbonItem("exportMaterialReq.pdf");
						var xlsMaterialReq = #{window}.getRibbonItem("exportMaterialReq.xls");
						var pdfWorker = #{window}.getRibbonItem("exportWorker.pdfWorker");
						var xlsWorker = #{window}.getRibbonItem("exportWorker.xlsWorker");
						var pdfMachine = #{window}.getRibbonItem("exportMachine.pdfMachine");
						var xlsMachine = #{window}.getRibbonItem("exportMachine.xlsMachine");
						var pdfProduct = #{window}.getRibbonItem("exportProduct.pdfProduct");
						var xlsProduct = #{window}.getRibbonItem("exportProduct.xlsProduct");
						var listener = {
							onChange: function(selectedRecord) {
								if (!selectedRecord) {
									print.disable();
									pdfMaterialReq.disable();
									xlsMaterialReq.disable();
									pdfWorker.disable();
									xlsWorker.disable();
									pdfMachine.disable();
									xlsMachine.disable();
									pdfProduct.disable();
									xlsProduct.disable();
								} else {
									print.enable();
									pdfMaterialReq.enable();
									xlsMaterialReq.enable();
									pdfWorker.enable();
									xlsWorker.enable();
									pdfMachine.enable();
									xlsMachine.enable();
									pdfProduct.enable();
									xlsProduct.enable();
								}
							}
						}
						this.addOnChangeListener(listener);
					]]>
				</script>
				<option type="column" name="number" fields="number" link="true" />
				<option type="column" name="name" fields="name" link="true" />
				<option type="column" name="state" fields="state" />
				<option type="column" name="dateFrom" fields="dateFrom" />
				<option type="column" name="dateTo" fields="dateTo" />
				<option type="order" column="number" direction="desc" />
				<option type="correspondingView" value="products/testOrder" />
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="name,number,state,dateFrom,dateTo" />
				<option type="orderable" value="name,number,state,dateFrom,dateTo" />
				<option type="fullscreen" value="true" />
				<option type="hasPredefinedFilters" value="true" />
				<predefinedFilters>
					<predefinedFilter name="all">
					</predefinedFilter>
					<predefinedFilter name="pending">
						<filterRestriction column="state" value="01pending" />
						<filterOrder column="dateFrom" direction="desc" />
					</predefinedFilter>
					<predefinedFilter name="overduePending">
						<filterRestriction column="state" value="01pending" />
						<filterRestriction column="dateTo" value="&lt;= @{yesterday}" />
					</predefinedFilter>
					<predefinedFilter name="overdueInProgress">
						<filterRestriction column="state" value="02inProgress" />
						<filterRestriction column="dateTo" value="&lt;= @{yesterday}" />
					</predefinedFilter>
					<predefinedFilter name="startingToday">
						<filterRestriction column="state" value="01pending" />
						<filterRestriction column="dateFrom" value="@{today}" />
					</predefinedFilter>
					<predefinedFilter name="startingTomorrow">
						<filterRestriction column="state" value="01pending" />
						<filterRestriction column="dateFrom" value="@{tomorrow}" />
					</predefinedFilter>
				</predefinedFilters>
				<listener event="printOrder" bean="com.qcadoo.mes.products.OrderService" method="printOrder" />
				<listener event="printMaterialReqForOrder" bean="com.qcadoo.mes.products.MaterialRequirementService" method="printMaterialReqForOrder" />
				<listener event="printWorkPlanForOrder" bean="com.qcadoo.mes.products.WorkPlanService" method="printWorkPlanForOrder" />
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />
		</component>
	</view>
	<view name="testOrder" model="order">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="navigation"/>
				<group template="formSaveCopyAndRemoveActions"/>
			</ribbon>
			<component type="form" name="order" reference="form">
				<script>
					<![CDATA[
						var save = #{window}.getRibbonItem("actions.save");
						var saveBack = #{window}.getRibbonItem("actions.saveBack");
						var cancel = #{window}.getRibbonItem("actions.cancel");
						var del = #{window}.getRibbonItem("actions.delete");
						this.addOnChangeListener({
							onSetValue: function(selectedRecord) {
								var state = #{state}.getValue().content.value;
								if (state && state == "03done") {
									save.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
									saveBack.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
									cancel.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
									del.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
								} else {
									save.enable();
									saveBack.enable();
									if (!selectedRecord) {
										cancel.disable();
										del.disable();
									} else {
										cancel.enable();
										del.enable();
									}
								}
							}
						});
					]]>
				</script>
				<component type="gridLayout" name="gridLayout" columns="3"
					rows="6" fixedRowHeight="false">
					<layoutElement column="1" row="1">
						<component type="input" name="number" reference="number"
							field="number" />
					</layoutElement>
					<layoutElement column="1" row="2" height="2">
						<component type="textarea" name="name" field="name" />
					</layoutElement>
					<layoutElement column="1" row="4">
						<component type="calendar" name="dateFrom" field="dateFrom" />
					</layoutElement>
					<layoutElement column="1" row="5">
						<component type="calendar" name="dateTo" field="dateTo" />
					</layoutElement>
					<layoutElement column="1" row="6">
						<component type="select" name="state" field="state" reference="state"/>
					</layoutElement>
					<layoutElement column="2" row="1" height="6">
						<component type="lookup" name="product" reference="product"
							field="product">
							<option type="column" name="name" fields="name" link="true"
								width="300" />
							<option type="column" name="category" fields="category" />
							<option type="searchable" value="name,category" />
							<option type="orderable" value="name,category" />
							<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name"/>
							<option type="fieldCode" value="number" />
							<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.products.OrderService" method="changeOrderProduct"/>
						</component>
						<component type="input" name="defaultTechnology"
							reference="defaultTechnology" field="defaultTechnology"
							defaultEnabled="false" />
						<component type="lookup" name="technology" reference="technology"
							field="technology" source="#{product}.technologies">
							<option type="column" name="name" fields="name" link="true"
								width="300" />
							<option type="searchable" value="name,number" />
							<option type="orderable" value="name,number" />
							<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name"/>
							<option type="fieldCode" value="number" />
						</component>
						<component type="input" name="plannedQuantity"
							reference="plannedQuantity" field="plannedQuantity" />
						<component type="input" name="doneQuantity" field="doneQuantity" />
					</layoutElement>
					<layoutElement column="3" row="1">
						<component type="calendar" name="effectiveDateFrom"
							field="effectiveDateFrom" defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="3" row="2">
						<component type="calendar" name="effectiveDateTo" field="effectiveDateTo"
							defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="3" row="3">
						<component type="input" name="startWorker" field="startWorker"
							defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="3" row="4">
						<component type="input" name="endWorker" field="endWorker"
							defaultEnabled="false" />
					</layoutElement>
				</component>
				<option type="header" value="false" />
				<option type="expression" value="#name + ' - ' + #number" />
			</component>
		</component>
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="generateOrderNumber" />		
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="fillDefaultTechnology" />		
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="disableFormForDoneOrder" />
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="disableTechnologiesIfProductDoesNotAny" />		
	</view>
</qcd:views>
	