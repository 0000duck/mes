<?xml version="1.0" encoding="UTF-8"?>

<qcd:views plugin="products" xmlns:qcd="http://www.qcadoo.com/view">
	<view name="tabWindowOrders" model="order" menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction"/>
				<group name="status">
					<bigButton name="activateOrder" icon="startIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.element.width(100);
								this.addOnChangeListener({
									onClick: function() {
										this.element.width(100);
										if (this.state == "begin") {
											if (window.confirm("#{translate(products.orders.window.ribbon.status.activateOrder.confirm)}")) {
												#{grid}.performEvent('activateOrder', [true]);
											};
										} else if (this.state == "finish") {
											if (window.confirm("#{translate(products.orders.window.ribbon.status.finishOrder.confirm)}")) {
												#{grid}.performEvent('activateOrder', [false]);
											};
										}
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
				<group name="export">
					<smallButton name="print" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printOrder,pdf);" state="disabled" />
					<smallButtons name="pdfMaterialReq" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printMaterialReqForOrder,pdf);" state="disabled">
						<smallButton name="xlsMaterialReq" icon="xlsIcon16.png"
							action="#{grid}.fireEvent(printMaterialReqForOrder,xls);" state="disabled" />
					</smallButtons>
				</group>
				<group name="exportPlan">
					<smallButtons name="pdfWorker" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printWorkPlanForOrder,pdf,ForWorker);" state="disabled">
						<smallButton name="pdfMachine" icon="pdfIcon16.png"
							action="#{grid}.fireEvent(printWorkPlanForOrder,pdf,ForMachine);" state="disabled"/>
						<smallButton name="pdfProduct" icon="pdfIcon16.png"
							action="#{grid}.fireEvent(printWorkPlanForOrder,pdf,ForProduct);" state="disabled"/>
					</smallButtons>
					<smallButtons name="xlsWorker" icon="xlsIcon16.png"
							action="#{grid}.fireEvent(printWorkPlanForOrder,xls,ForWorker);" state="disabled">
						<smallButton name="xlsMachine" icon="xlsIcon16.png"
							action="#{grid}.fireEvent(printWorkPlanForOrder,xls,ForMachine);" state="disabled" />
						<smallButton name="xlsProduct" icon="xlsIcon16.png"
							action="#{grid}.fireEvent(printWorkPlanForOrder,xls,ForProduct);" state="disabled" />
					</smallButtons>
				</group>
				<group name="genealogy">
					<bigButton name="genealogy" action="#{grid}.fireEvent(showGenealogy);" icon="genealogyIcon24.png" state="disabled" />
					<bigButton name="newGenealogy" action="#{grid}.fireEvent(newGenealogy);" icon="newGenealogyIcon24.png" state="disabled" />
				</group>
				<group name="qualityContol">
					<bigButton name="generateQualityControl" action="#{grid}.fireEvent(generateQualityControl);" icon="qualityControlIcon24.png" state="disabled" />
				</group>
			</ribbon>
			<component type="grid" name="orders" reference="grid">
				<script>
					<![CDATA[
						var print = #{window}.getRibbonItem("export.print");
						var pdfMaterialReq = #{window}.getRibbonItem("export.pdfMaterialReq");
						var xlsMaterialReq = #{window}.getRibbonItem("export.pdfMaterialReq.xlsMaterialReq");
						var pdfWorker = #{window}.getRibbonItem("exportPlan.pdfWorker");
						var xlsWorker = #{window}.getRibbonItem("exportPlan.xlsWorker");
						var pdfMachine = #{window}.getRibbonItem("exportPlan.pdfWorker.pdfMachine");
						var xlsMachine = #{window}.getRibbonItem("exportPlan.xlsWorker.xlsMachine");
						var pdfProduct = #{window}.getRibbonItem("exportPlan.pdfWorker.pdfProduct");
						var xlsProduct = #{window}.getRibbonItem("exportPlan.xlsWorker.xlsProduct");
						var genealogy = #{window}.getRibbonItem("genealogy.genealogy");
						var newGenealogy = #{window}.getRibbonItem("genealogy.newGenealogy");
						var activateOrder = #{window}.getRibbonItem("status.activateOrder");
						var genQualityControl = #{window}.getRibbonItem("qualityContol.generateQualityControl");
						var listener = {
							onChange: function(selectedEntitiesArray) {
								if (!selectedEntitiesArray || selectedEntitiesArray.length == 0) {
									print.disable();
									pdfMaterialReq.disable();
									xlsMaterialReq.disable();
									pdfWorker.disable();
									xlsWorker.disable();
									pdfMachine.disable();
									xlsMachine.disable();
									pdfProduct.disable();
									xlsProduct.disable();
									genealogy.disable();
									newGenealogy.disable();
									activateOrder.disable();
									genQualityControl.disable();
								} else {
									if (selectedEntitiesArray.length == 1) {
										print.enable();
										genealogy.enable();
										newGenealogy.enable();
										var selectedEntityStatus = selectedEntitiesArray[0].fields.state;
										if (selectedEntityStatus == '01pending') {
											activateOrder.enable();
											activateOrder.state = "begin";
											activateOrder.setLabel("#{translate(products.orders.window.ribbon.status.activateOrder)}");
											activateOrder.setIcon('startIcon24.png');
											genQualityControl.enable();
										} else if (selectedEntityStatus == '02inProgress') {
											activateOrder.enable();
											activateOrder.state = "finish";
											activateOrder.setLabel("#{translate(products.orders.window.ribbon.status.finishOrder)}");
											activateOrder.setIcon('acceptIcon24.png');
											genQualityControl.enable();
										} else {
											activateOrder.disable();
											genQualityControl.disable();
										}
									} else {
										print.disable("#{translate(moreThanOneRecordSelected)}");
										genealogy.disable("#{translate(moreThanOneRecordSelected)}");
										newGenealogy.disable("#{translate(moreThanOneRecordSelected)}");
										activateOrder.disable("#{translate(moreThanOneRecordSelected)}");
										genQualityControl.disable("#{translate(moreThanOneRecordSelected)}");
									}
									pdfMaterialReq.enable();
									xlsMaterialReq.enable();
									pdfWorker.enable();
									xlsWorker.enable();
									pdfMachine.enable();
									xlsMachine.enable();
									pdfProduct.enable();
									xlsProduct.enable();
								}
							}
						}
						this.addOnChangeListener(listener);
					]]>
				</script>
				<option type="column" name="number" fields="number" link="true" width="50"/>
				<option type="column" name="name" fields="name" link="true" />
				<option type="column" name="state" fields="state" width="40"/>
				<option type="column" name="dateFrom" fields="dateFrom" width="40"/>
				<option type="column" name="dateTo" fields="dateTo" width="40"/>
				<option type="order" column="number" direction="desc" />
				<option type="correspondingView" value="products/tabWindowOrder" />
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="name,number,state,dateFrom,dateTo" />
				<option type="orderable" value="name,number,state,dateFrom,dateTo" />
				<option type="fullscreen" value="true" />
				<option type="multiselect" value="true" />
				<option type="hasPredefinedFilters" value="true" />
				<predefinedFilters>
					<predefinedFilter name="all">
					</predefinedFilter>
					<predefinedFilter name="pending">
						<filterRestriction column="state" value="01pending" />
						<filterOrder column="dateFrom" direction="asc" />
					</predefinedFilter>
					<predefinedFilter name="inProgress">
						<filterRestriction column="state" value="02inProgress" />
						<filterOrder column="dateTo" direction="asc" />
					</predefinedFilter>
					<predefinedFilter name="overduePending">
						<filterRestriction column="state" value="01pending" />
						<filterRestriction column="dateTo" value="&lt;= @{yesterday}" />
					</predefinedFilter>
					<predefinedFilter name="overdueInProgress">
						<filterRestriction column="state" value="02inProgress" />
						<filterRestriction column="dateTo" value="&lt;= @{yesterday}" />
					</predefinedFilter>
					<predefinedFilter name="startingToday">
						<filterRestriction column="state" value="01pending" />
						<filterRestriction column="dateFrom" value="@{today}" />
					</predefinedFilter>
					<predefinedFilter name="startingTomorrow">
						<filterRestriction column="state" value="01pending" />
						<filterRestriction column="dateFrom" value="@{tomorrow}" />
					</predefinedFilter>
				</predefinedFilters>
				<listener event="printOrder" bean="com.qcadoo.mes.products.OrderService" method="printOrder" />
				<listener event="printMaterialReqForOrder" bean="com.qcadoo.mes.products.MaterialRequirementService" method="printMaterialReqForOrder" />
				<listener event="printWorkPlanForOrder" bean="com.qcadoo.mes.products.WorkPlanService" method="printWorkPlanForOrder" />
				<listener event="activateOrder" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="autoGenerateQualityControl"/>
				<listener event="activateOrder" bean="com.qcadoo.mes.genealogies.AutoGenealogyService" method="generateGenalogyOnChangeOrderStatusForDone"/>
				<listener event="activateOrder" bean="com.qcadoo.mes.products.OrderService" method="activateOrder"/>
				<listener event="showGenealogy" bean="com.qcadoo.mes.genealogies.GenealogyService" method="showGenealogy" />
				<listener event="newGenealogy" bean="com.qcadoo.mes.genealogies.GenealogyService" method="newGenealogy" />
				<listener event="generateQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="generateQualityControl" />
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />
		</component>
	</view>
	<view name="tabWindowOrder" model="order">
		<component type="tabWindow" name="window" reference="window" header="true">
			<ribbon>
				<group template="navigation"/>
				<group template="formSaveCopyAndRemoveActions"/>
				<group name="genealogy">
					<bigButton name="genealogy" action="#{form}.fireEvent(showGenealogy);" icon="genealogyIcon24.png" state="disabled" />
					<bigButton name="newGenealogy" action="#{form}.fireEvent(newGenealogy);" icon="newGenealogyIcon24.png" state="disabled" />
				</group>
				<group name="qualityContol">
					<bigButton name="generateQualityControl" action="#{form}.fireEvent(generateQualityControl);" icon="qualityControlIcon24.png" state="disabled" />
				</group>
			</ribbon>
			<windowTab name="tab1" reference="mainTab">
				<ribbon>
					<group name="status">
						<bigButton name="activateOrder" icon="startIcon24.png" state="disabled">
							<script>
								<![CDATA[
									this.element.width(100);
									this.addOnChangeListener({
										onClick: function() {
											this.element.width(100);
											if (this.state == "begin") {
												if (window.confirm("#{translate(products.orders.window.ribbon.status.activateOrder.confirm)}")) {
													#{form}.performEvent('activateOrder', [true]);
												};
											} else if (this.state == "finish") {
												if (window.confirm("#{translate(products.orders.window.ribbon.status.finishOrder.confirm)}")) {
													#{form}.performEvent('activateOrder', [false]);
												};
											}
										}
									});
								]]>
							</script>
						</bigButton>
					</group>
				</ribbon>
				<component type="form" name="order" reference="form">
					<script>
						<![CDATA[
							var save = #{window}.getRibbonItem("actions.save");
							var saveBack = #{window}.getRibbonItem("actions.saveBack");
							var saveNew = #{window}.getRibbonItem("actions.saveNew");
							var cancel = #{window}.getRibbonItem("actions.cancel");
							var del = #{window}.getRibbonItem("actions.delete");
							var genealogy = #{window}.getRibbonItem("genealogy.genealogy");
							var newGenealogy = #{window}.getRibbonItem("genealogy.newGenealogy");
							var activateOrder = #{mainTab}.getRibbonItem("status.activateOrder");
							var genQualityControl = #{window}.getRibbonItem("qualityContol.generateQualityControl");
							
							this.addOnChangeListener({
								onSetValue: function(value) {
									if (! value.content || ! value.content.entityId) {
										return;
									}
									var state = #{state}.getValue().content.value;
									if (state && state == "03done") {
										save.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
										saveBack.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
										saveNew.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
										cancel.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
										del.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
										activateOrder.disable();
										genQualityControl.disable();
									} else if (state && state == "02inProgress") { 
										activateOrder.enable();
										activateOrder.state = "finish";
										activateOrder.setLabel("#{translate(products.orders.window.ribbon.status.finishOrder)}");
										activateOrder.setIcon('acceptIcon24.png');
										genQualityControl.enable();
									} else if (state && state == "01pending") {
										activateOrder.enable();
										activateOrder.state = "begin";
										activateOrder.setLabel("#{translate(products.orders.window.ribbon.status.activateOrder)}");
										activateOrder.setIcon('startIcon24.png');
										genQualityControl.enable();
									} else {
										save.enable();
										saveBack.enable();
										saveNew.enable();
										
										if (value && value.content && value.content.entityId) {
											cancel.enable();
											del.enable();
										} else {
											cancel.disable();
											del.disable();
										}
									}
									if (value && value.content && ! value.content.entityId) {
										activateOrder.disable();
										genealogy.disable();
										genQualityControl.disable();
									} else {
										genealogy.enable();
										newGenealogy.enable();
									}
								}
							});
						]]>
					</script>
					<component type="gridLayout" name="gridLayout" columns="3"
						rows="7">
						<layoutElement column="1" row="1">
							<component type="select" name="state" field="state" reference="state" defaultEnabled="false" />
						</layoutElement>
						<layoutElement column="1" row="2">
							<component type="input" name="number" reference="number"
								field="number" />
						</layoutElement>
						<layoutElement column="1" row="3" height="2">
							<component type="textarea" name="name" field="name" reference="name" hasDescription="true" />
						</layoutElement>
						<layoutElement column="1" row="5">
							<component type="separatorLine" name="line1" />
						</layoutElement>
						<layoutElement column="1" row="6">
							<component type="calendar" name="dateFrom" field="dateFrom">
								<listener event="onChange" bean="com.qcadoo.mes.products.OrderService" method="changeDateFrom"/>
								<option type="labelWidth" value="55" />
							</component>						
						</layoutElement>
						<layoutElement column="1" row="7">
							<component type="calendar" name="dateTo" field="dateTo" reference="dateTo">
								<option type="labelWidth" value="55" />
							</component>
						</layoutElement>
					</component>
					<option type="header" value="true"/>
					<option type="expression" value="#name + ' - ' + #number" />
					<listener event="activateOrder" bean="com.qcadoo.mes.genealogies.AutoGenealogyService" method="generateGenalogyOnChangeOrderStatusForDone"/>
					<listener event="activateOrder" bean="com.qcadoo.mes.products.OrderService" method="activateOrder"/>
					<listener event="activateOrder" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="autoGenerateQualityControl"/>
					<listener event="showGenealogy" bean="com.qcadoo.mes.genealogies.GenealogyService" method="showGenealogy" />
					<listener event="newGenealogy" bean="com.qcadoo.mes.genealogies.GenealogyService" method="newGenealogy" />
					<listener event="generateQualityControl" bean="com.qcadoo.mes.qualityControls.QualityControlService" method="generateQualityControl" />
				</component>
			</windowTab>
			<windowTab name="tab2">
					<component type="gridLayout" name="gridLayout" columns="3" rows="7">
						<layoutElement column="1" row="1">
							<component type="lookup" name="product" reference="product"
								field="#{form}.product">
								<option type="column" name="name" fields="name" link="true"
									width="200" />
								<option type="column" name="ean" fields="ean" />
								<option type="searchable" value="name,ean" />
								<option type="orderable" value="name,ean" />
								<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name"/>
								<option type="fieldCode" value="number" />
								<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.products.OrderService" method="changeOrderProduct"/>
								<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.products.OrderService" method="setDefaultNameUsingProduct"/>
								<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.products.util.UnitService" method="fillProductUnit" />
							</component>
						</layoutElement>
						<layoutElement column="1" row="2">
							<component type="input" name="defaultTechnology"
								reference="defaultTechnology" field="#{form}.defaultTechnology"
								defaultEnabled="false" />
						</layoutElement>
						<layoutElement column="1" row="3">
							<component type="lookup" name="technology" reference="technology"
								field="#{form}.technology" source="#{product}.technologies">
								<option type="column" name="name" fields="name" link="true"
									width="300" />
								<option type="searchable" value="name,number" />
								<option type="orderable" value="name,number" />
								<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name"/>
								<option type="fieldCode" value="number" />
							</component>
						</layoutElement>
						<layoutElement column="1" row="4">
							<component type="separatorLine" name="line2" />
						</layoutElement>
						<layoutElement column="1" row="5">
							<component type="input" name="plannedQuantity"
								reference="plannedQuantity" field="#{form}.plannedQuantity">
								<option type="labelWidth" value="55" />
							</component>
						</layoutElement>
						<layoutElement column="1" row="6">
							<component type="input" name="doneQuantity" field="#{form}.doneQuantity">
								<option type="labelWidth" value="55" />
							</component>
						</layoutElement>
						<layoutElement column="1" row="7">
							<component type="input" name="unit" reference="unit" defaultEnabled="false">
								<option type="labelWidth" value="55" />
							</component>
						</layoutElement>
					</component>
			</windowTab>
			<windowTab name="tab3">
				<component type="gridLayout" name="gridLayout" columns="3" rows="4">
					<layoutElement column="1" row="1">
						<component type="calendar" name="effectiveDateFrom"
							field="#{form}.effectiveDateFrom" reference="effectiveDateFrom" defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="calendar" name="effectiveDateTo" field="#{form}.effectiveDateTo" reference="effectiveDateTo"
							defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="1" row="3">
						<component type="input" name="startWorker" field="#{form}.startWorker" reference="startWorker"
							defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="1" row="4">
						<component type="input" name="endWorker" field="#{form}.endWorker" reference="endWorker"
							defaultEnabled="false" />
					</layoutElement>
				</component>
			</windowTab>
		</component>
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="generateOrderNumber" />		
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="fillDefaultTechnology" />		
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="disableFormForDoneOrder" />
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="disableTechnologiesIfProductDoesNotAny" />
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="setAndDisableState"/>
		<preRenderHook bean="com.qcadoo.mes.products.util.UnitService" method="fillProductUnitPreRender" />		
	</view>
	
	
	
	
	
	
	
	
	
	
	
	
	
	<view name="tabProducts" model="product" menuAccessible="true">
		<component type="tabWindow" name="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction"/>
			</ribbon>
			<component type="grid" name="products" reference="grid">
				<option type="column" name="number" fields="number" link="true"
					width="150" />
				<option type="column" name="name" fields="name" link="true"
					width="300" />
				<option type="column" name="typeOfMaterial" fields="typeOfMaterial" />
				<option type="column" name="ean" fields="ean" />
				<option type="order" column="name" direction="asc"/>
				<option type="correspondingView" value="products/tabProduct" />
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="name,number,typeOfMaterial,ean" />
				<option type="orderable" value="name,number,typeOfMaterial,ean" />
				<option type="fullscreen" value="true" />
				<option type="multiselect" value="true" />
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />
		</component>
	</view>
	<view name="tabProduct" model="product">
		<component type="tabWindow" name="window" header="true">
			<ribbon>
				<group template="navigation"/>
				<group template="formSaveCopyAndRemoveActions"/>
			</ribbon>
			<component type="form" name="product" reference="form">
				<component type="gridLayout" name="gridLayout" columns="3" rows="11">
					<layoutElement column="1" row="1">
						<component type="input" name="number" field="number" reference="number" />
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="textarea" name="name" field="name" hasDescription="true" />
					</layoutElement>				
					<layoutElement column="1" row="3">
						<component type="select" name="typeOfMaterial" field="typeOfMaterial" />
					</layoutElement>
					<layoutElement column="1" row="4">
						<component type="select" name="unit" field="unit" />
					</layoutElement>	
					<layoutElement column="2" row="1">
						<component type="input" name="ean" field="ean" />
					</layoutElement>
					<layoutElement column="2" row="2">
						<component type="select" name="category" field="category" />
					</layoutElement>
					<layoutElement column="2" row="3">
						<component type="input" name="batch" field="batch" />						
					</layoutElement>
					<layoutElement column="2" row="4">
						<component type="checkbox" name="genealogyBatchReq" field="genealogyBatchReq">
							<option type="labelWidth" value="60" />
						</component>
					</layoutElement>
					<layoutElement column="1" row="5" width="3" height="7">
						<component type="borderLayout" name="substitutesBorderLayout" reference="substitutesBorderLayout">
							<option type="label" value="substitutesBorderLayoutLabel" />
							<component type="gridLayout" name="gridsLayout" columns="5" rows="6" hasBorders="false">
								<layoutElement column="1" row="1" width="2" height="6">
									<component type="grid" name="substitutes" reference="substitutes" source="#{form}.substitutes">
										<option type="column" name="number" fields="number" link="true" width="50"/>
										<option type="column" name="name" fields="name" link="true" width="100"/>
										<option type="order" column="priority" direction="asc"/>
										<option type="correspondingView" value="products/substitute" />
										<option type="correspondingComponent" value="form" />
										<option type="correspondingViewInModal" value="true" />
										<option type="paginable" value="false" />
										<option type="creatable" value="true" />
										<option type="deletable" value="true" />
										<option type="fullscreen" value="true" />
										<option type="multiselect" value="true" />
									</component>
								</layoutElement>
								<layoutElement column="3" row="1" width="3" height="6">
									<component type="grid" name="substituteComponents"
										source="#{substitutes}.components">
										<option type="column" name="number" fields="product"
											expression="#product['number']" link="true" width="50"/>
										<option type="column" name="name" fields="product"
											expression="#product['name']" link="true" width="100"/>
										<option type="column" name="quantity" fields="quantity" width="40"/>
										<option type="column" name="unit" fields="product"
											expression="#product['unit']" link="false" width="30"/>
										<option type="order" column="number" direction="desc"/>
										<option type="correspondingView" value="products/substituteComponent" />
										<option type="correspondingComponent" value="form" />
										<option type="correspondingViewInModal" value="true" />
										<option type="paginable" value="false" />
										<option type="creatable" value="true" />
										<option type="deletable" value="true" />
										<option type="fullscreen" value="true" />
										<option type="multiselect" value="true" />
									</component>
								</layoutElement>
							</component>
						</component>
					</layoutElement>
				</component>
				<option type="header" value="true"/>
				<option type="expression" value="#name" />
			</component>
		</component>
		<preRenderHook bean="com.qcadoo.mes.products.ProductService" method="generateProductNumber" />
	</view>
</qcd:views>