<?xml version="1.0" encoding="UTF-8"?>
<!-- *************************************************************************** 
	Copyright (c) 2010 Qcadoo Limited Project: Qcadoo MES Version: 0.2.0 This 
	file is part of Qcadoo. Qcadoo is free software; you can redistribute it 
	and/or modify it under the terms of the GNU Affero General Public License 
	as published by the Free Software Foundation; either version 3 of the License, 
	or (at your option) any later version. This program is distributed in the 
	hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
	warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
	GNU Affero General Public License for more details. You should have received 
	a copy of the GNU Affero General Public License along with this program; 
	if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth 
	Floor, Boston, MA 02110-1301 USA *************************************************************************** -->

<qcd:views plugin="products" xmlns:qcd="http://www.qcadoo.com/view">
	<view name="orders" model="order" menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction"/>
				<group name="status">
					<bigButton name="activateOrder" icon="startIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(products.orders.window.ribbon.status.activateOrder.confirm)}")) {
											#{grid}.performEvent('activateOrder', [true]);
										};
									}
								});
							]]>
						</script>
					</bigButton>
					<bigButton name="finishOrder" icon="acceptIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(products.orders.window.ribbon.status.finishOrder.confirm)}")) {
											#{grid}.performEvent('activateOrder', [false]);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
				<group name="export">
					<smallButton name="print" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printOrder,pdf);" state="disabled" />
					<smallButtons name="pdfMaterialReq" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printMaterialReqForOrder,pdf);" state="disabled">
						<smallButton name="xlsMaterialReq" icon="xlsIcon16.png"
							action="#{grid}.fireEvent(printMaterialReqForOrder,xls);" state="disabled" />
					</smallButtons>
				</group>
				<group name="exportPlan">
					<smallButtons name="pdfWorker" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printWorkPlanForOrder,pdf,ForWorker);" state="disabled">
						<smallButton name="xlsWorker" icon="xlsIcon16.png"
							action="#{grid}.fireEvent(printWorkPlanForOrder,xls,ForWorker);" state="disabled" />
					</smallButtons>
					<smallButtons name="pdfMachine" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printWorkPlanForOrder,pdf,ForMachine);" state="disabled">
						<smallButton name="xlsMachine" icon="xlsIcon16.png"
							action="#{grid}.fireEvent(printWorkPlanForOrder,xls,ForMachine);" state="disabled" />
					</smallButtons>
					<smallButtons name="pdfProduct" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printWorkPlanForOrder,pdf,ForProduct);" state="disabled">
						<smallButton name="xlsProduct" icon="xlsIcon16.png"
							action="#{grid}.fireEvent(printWorkPlanForOrder,xls,ForProduct);" state="disabled" />
					</smallButtons>
				</group>
				<group name="genealogy">
					<bigButton name="genealogy" action="#{grid}.fireEvent(showGenealogy);" icon="genealogyIcon24.png" state="disabled" />
					<bigButton name="newGenealogy" action="#{grid}.fireEvent(newGenealogy);" icon="genealogyIcon24.png" state="disabled" />
				</group>
				<group name="qualityContol">
					<bigButton name="generateQualityControl" action="#{grid}.fireEvent(generateQualityControl);" icon="qualityControlIcon24.png" state="disabled" />
				</group>
			</ribbon>
			<component type="grid" name="orders" reference="grid">
				<script>
					<![CDATA[
						var print = #{window}.getRibbonItem("export.print");
						var pdfMaterialReq = #{window}.getRibbonItem("export.pdfMaterialReq");
						var xlsMaterialReq = #{window}.getRibbonItem("export.pdfMaterialReq.xlsMaterialReq");
						var pdfWorker = #{window}.getRibbonItem("exportPlan.pdfWorker");
						var xlsWorker = #{window}.getRibbonItem("exportPlan.pdfWorker.xlsWorker");
						var pdfMachine = #{window}.getRibbonItem("exportPlan.pdfMachine");
						var xlsMachine = #{window}.getRibbonItem("exportPlan.pdfMachine.xlsMachine");
						var pdfProduct = #{window}.getRibbonItem("exportPlan.pdfProduct");
						var xlsProduct = #{window}.getRibbonItem("exportPlan.pdfProduct.xlsProduct");
						var genealogy = #{window}.getRibbonItem("genealogy.genealogy");
						var newGenealogy = #{window}.getRibbonItem("genealogy.newGenealogy");
						var activateOrder = #{window}.getRibbonItem("status.activateOrder");
						var finishOrder = #{window}.getRibbonItem("status.finishOrder");
						var genQualityControl = #{window}.getRibbonItem("qualityContol.generateQualityControl");
						var listener = {
							onChange: function(selectedEntitiesArray) {
								if (!selectedEntitiesArray || selectedEntitiesArray.length == 0) {
									print.disable();
									pdfMaterialReq.disable();
									xlsMaterialReq.disable();
									pdfWorker.disable();
									xlsWorker.disable();
									pdfMachine.disable();
									xlsMachine.disable();
									pdfProduct.disable();
									xlsProduct.disable();
									genealogy.disable();
									newGenealogy.disable();
									activateOrder.disable();
									finishOrder.disable();
									genQualityControl.disable();
								} else {
									if (selectedEntitiesArray.length == 1) {
										print.enable();
										genealogy.enable();
									} else {
										print.disable();
										genealogy.disable();
									}
									pdfMaterialReq.enable();
									xlsMaterialReq.enable();
									pdfWorker.enable();
									xlsWorker.enable();
									pdfMachine.enable();
									xlsMachine.enable();
									pdfProduct.enable();
									xlsProduct.enable();
									newGenealogy.enable();
									var isPending = false;
									var isInProgress = false;
									for (var i in selectedEntitiesArray) {
										if(selectedEntitiesArray[i].fields.state == '01pending') {
											isPending = true;
										} else if(selectedEntitiesArray[i].fields.state == '02inProgress') {
											isInProgress = true;
										}
									}
									if (isPending) {
										activateOrder.enable();
									} else {
										activateOrder.disable();
									}
									if (isInProgress) {
										finishOrder.enable();
									} else {
										finishOrder.disable();
									}
									if (isPending || isInProgress) {
										genQualityControl.enable();
									} else {
										genQualityControl.disable();
									}
								}
							}
						}
						this.addOnChangeListener(listener);
					]]>
				</script>
				<option type="column" name="number" fields="number" link="true" />
				<option type="column" name="name" fields="name" link="true" />
				<option type="column" name="state" fields="state" />
				<option type="column" name="dateFrom" fields="dateFrom" />
				<option type="column" name="dateTo" fields="dateTo" />
				<option type="order" column="number" direction="desc" />
				<option type="correspondingView" value="products/order" />
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="name,number,state,dateFrom,dateTo" />
				<option type="orderable" value="name,number,state,dateFrom,dateTo" />
				<option type="fullscreen" value="true" />
				<option type="multiselect" value="true" />
				<option type="hasPredefinedFilters" value="true" />
				<predefinedFilters>
					<predefinedFilter name="all">
					</predefinedFilter>
					<predefinedFilter name="pending">
						<filterRestriction column="state" value="01pending" />
						<filterOrder column="dateFrom" direction="desc" />
					</predefinedFilter>
					<predefinedFilter name="overduePending">
						<filterRestriction column="state" value="01pending" />
						<filterRestriction column="dateTo" value="&lt;= @{yesterday}" />
					</predefinedFilter>
					<predefinedFilter name="overdueInProgress">
						<filterRestriction column="state" value="02inProgress" />
						<filterRestriction column="dateTo" value="&lt;= @{yesterday}" />
					</predefinedFilter>
					<predefinedFilter name="startingToday">
						<filterRestriction column="state" value="01pending" />
						<filterRestriction column="dateFrom" value="@{today}" />
					</predefinedFilter>
					<predefinedFilter name="startingTomorrow">
						<filterRestriction column="state" value="01pending" />
						<filterRestriction column="dateFrom" value="@{tomorrow}" />
					</predefinedFilter>
				</predefinedFilters>
				<listener event="printOrder" bean="com.qcadoo.mes.products.OrderService" method="printOrder" />
				<listener event="printMaterialReqForOrder" bean="com.qcadoo.mes.products.MaterialRequirementService" method="printMaterialReqForOrder" />
				<listener event="printWorkPlanForOrder" bean="com.qcadoo.mes.products.WorkPlanService" method="printWorkPlanForOrder" />
				<listener event="activateOrder" bean="com.qcadoo.mes.products.QualityControlService" method="autoGenerateQualityControl"/>
				<listener event="activateOrder" bean="com.qcadoo.mes.genealogies.AutoGenealogyService" method="generateGenalogyOnChangeOrderStatusForDone"/>
				<listener event="activateOrder" bean="com.qcadoo.mes.products.OrderService" method="activateOrder"/>
				<listener event="showGenealogy" bean="com.qcadoo.mes.genealogies.GenealogyService" method="showGenealogy" />
				<listener event="newGenealogy" bean="com.qcadoo.mes.genealogies.GenealogyService" method="newGenealogy" />
				<listener event="generateQualityControl" bean="com.qcadoo.mes.products.QualityControlService" method="generateQualityControl" />
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />
		</component>
	</view>
	<view name="order" model="order">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="navigation"/>
				<group template="formSaveCopyAndRemoveActions"/>
				<group name="status">
					<bigButton name="activateOrder" icon="startIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(products.orders.window.ribbon.status.activateOrder.confirm)}")) {
											#{form}.performEvent('activateOrder', [true]);
										};
									}
								});
							]]>
						</script>
					</bigButton>
					<bigButton name="finishOrder" icon="acceptIcon24.png" state="disabled">
						<script>
							<![CDATA[
								this.addOnChangeListener({
									onClick: function() {
										if (window.confirm("#{translate(products.orders.window.ribbon.status.finishOrder.confirm)}")) {
											#{form}.performEvent('activateOrder', [false]);
										};
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
				<group name="genealogy">
					<bigButton name="genealogy" action="#{form}.fireEvent(showGenealogy);" icon="genealogyIcon24.png" state="disabled" />
					<bigButton name="newGenealogy" action="#{form}.fireEvent(newGenealogy);" icon="genealogyIcon24.png" state="disabled" />
				</group>
				<group name="qualityContol">
					<bigButton name="generateQualityControl" action="#{form}.fireEvent(generateQualityControl);" icon="qualityControlIcon24.png" state="disabled" />
				</group>
			</ribbon>
			<component type="form" name="order" reference="form">
				<script>
					<![CDATA[
						var save = #{window}.getRibbonItem("actions.save");
						var saveBack = #{window}.getRibbonItem("actions.saveBack");
						var saveNew = #{window}.getRibbonItem("actions.saveNew");
						var cancel = #{window}.getRibbonItem("actions.cancel");
						var del = #{window}.getRibbonItem("actions.delete");
						var genealogy = #{window}.getRibbonItem("genealogy.genealogy");
						var newGenealogy = #{window}.getRibbonItem("genealogy.newGenealogy");
						var activateOrder = #{window}.getRibbonItem("status.activateOrder");
						var finishOrder = #{window}.getRibbonItem("status.finishOrder");
						var genQualityControl = #{window}.getRibbonItem("qualityContol.generateQualityControl");
						
						this.addOnChangeListener({
							onSetValue: function(value) {
								var state = #{state}.getValue().content.value;
								if (state && state == "03done") {
									save.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
									saveBack.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
									saveNew.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
									cancel.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
									del.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
									activateOrder.disable();
									finishOrder.disable();
									genQualityControl.disable();
								} else if (state && state == "02inProgress") { 
									activateOrder.disable();
									finishOrder.enable();
									genQualityControl.enable();
								} else if (state && state == "01pending") {
									activateOrder.enable();
									finishOrder.disable();
									genQualityControl.enable();
								} else {
									save.enable();
									saveBack.enable();
									saveNew.enable();
									
									if (value && value.content && value.content.entityId) {
										cancel.enable();
										del.enable();
									} else {
										cancel.disable();
										del.disable();
									}
								}
								if (value && value.content && ! value.content.entityId) {
									activateOrder.disable();
									genealogy.disable();
									genQualityControl.disable();
								} else {
									genealogy.enable();
									newGenealogy.enable();
								}
							}
						});
					]]>
				</script>
				<component type="gridLayout" name="gridLayout" columns="3"
					rows="6">
					<layoutElement column="1" row="1">
						<component type="input" name="number" reference="number"
							field="number" />
					</layoutElement>
					<layoutElement column="1" row="2" height="2">
						<component type="textarea" name="name" field="name" />
					</layoutElement>
					<layoutElement column="1" row="4">
						<component type="calendar" name="dateFrom" field="dateFrom" />
					</layoutElement>
					<layoutElement column="1" row="5">
						<component type="calendar" name="dateTo" field="dateTo" />
					</layoutElement>
					<layoutElement column="1" row="6">
						<component type="select" name="state" field="state" reference="state" defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="2" row="1">
						<component type="lookup" name="product" reference="product"
							field="product">
							<option type="column" name="name" fields="name" link="true"
								width="300" />
							<option type="column" name="category" fields="category" />
							<option type="searchable" value="name,category" />
							<option type="orderable" value="name,category" />
							<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name"/>
							<option type="fieldCode" value="number" />
							<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.products.OrderService" method="changeOrderProduct"/>
						</component>
					</layoutElement>
					<layoutElement column="2" row="2">
						<component type="input" name="defaultTechnology"
							reference="defaultTechnology" field="defaultTechnology"
							defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="2" row="3">
						<component type="lookup" name="technology" reference="technology"
							field="technology" source="#{product}.technologies">
							<option type="column" name="name" fields="name" link="true"
								width="300" />
							<option type="searchable" value="name,number" />
							<option type="orderable" value="name,number" />
							<option type="expression" value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name"/>
							<option type="fieldCode" value="number" />
						</component>
					</layoutElement>
					<layoutElement column="2" row="4">
						<component type="input" name="plannedQuantity"
							reference="plannedQuantity" field="plannedQuantity" />
					</layoutElement>
					<layoutElement column="2" row="5">
						<component type="input" name="doneQuantity" field="doneQuantity" />
					</layoutElement>
					<layoutElement column="3" row="1">
						<component type="calendar" name="effectiveDateFrom"
							field="effectiveDateFrom" reference="effectiveDateFrom" defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="3" row="2">
						<component type="calendar" name="effectiveDateTo" field="effectiveDateTo" reference="effectiveDateTo"
							defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="3" row="3">
						<component type="input" name="startWorker" field="startWorker" reference="startWorker"
							defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="3" row="4">
						<component type="input" name="endWorker" field="endWorker" reference="endWorker"
							defaultEnabled="false" />
					</layoutElement>
				</component>
				<option type="header" value="true"/>
				<option type="expression" value="#name + ' - ' + #number" />
				<listener event="activateOrder" bean="com.qcadoo.mes.genealogies.AutoGenealogyService" method="generateGenalogyOnChangeOrderStatusForDone"/>
				<listener event="activateOrder" bean="com.qcadoo.mes.products.OrderService" method="activateOrder"/>
				<listener event="activateOrder" bean="com.qcadoo.mes.products.QualityControlService" method="autoGenerateQualityControl"/>
				<listener event="showGenealogy" bean="com.qcadoo.mes.genealogies.GenealogyService" method="showGenealogy" />
				<listener event="newGenealogy" bean="com.qcadoo.mes.genealogies.GenealogyService" method="newGenealogy" />
				<listener event="generateQualityControl" bean="com.qcadoo.mes.products.QualityControlService" method="generateQualityControl" />
			</component>
		</component>
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="generateOrderNumber" />		
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="fillDefaultTechnology" />		
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="disableFormForDoneOrder" />
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="disableTechnologiesIfProductDoesNotAny" />
		<preRenderHook bean="com.qcadoo.mes.products.OrderService" method="setAndDisableState"/>		
	</view>
</qcd:views>