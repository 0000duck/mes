<?xml version="1.0" encoding="UTF-8"?>
<!-- *************************************************************************** 
	Copyright (c) 2010 Qcadoo Limited Project: Qcadoo MES Version: 0.3.0 This 
	file is part of Qcadoo. Qcadoo is free software; you can redistribute it 
	and/or modify it under the terms of the GNU Affero General Public License 
	as published by the Free Software Foundation; either version 3 of the License, 
	or (at your option) any later version. This program is distributed in the 
	hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
	warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
	GNU Affero General Public License for more details. You should have received 
	a copy of the GNU Affero General Public License along with this program; 
	if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth 
	Floor, Boston, MA 02110-1301 USA *************************************************************************** -->

<views plugin="products" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://schema.qcadoo.org/view" xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd">
	<view name="orders" model="order" menuAccessible="true">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="gridNewCopyAndRemoveAction" />
				<group name="status">
					<bigButton name="activateOrder" icon="startIcon24.png"
						state="disabled">
						<script>
							<![CDATA[
								this.element.width(100);
								this.addOnChangeListener({
									onClick: function() {
										this.element.width(100);
										if (this.state == "begin") {
											if (window.confirm("#{translate(products.orders.window.ribbon.status.activateOrder.confirm)}")) {
												#{grid}.performEvent('activateOrder', [true]);
											};
										} else if (this.state == "finish") {
											if (window.confirm("#{translate(products.orders.window.ribbon.status.finishOrder.confirm)}")) {
												#{grid}.performEvent('activateOrder', [false]);
											};
										}
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
				<group name="export">
					<smallButton name="print" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printOrder,pdf);" state="disabled" />
					<smallButtons name="pdfMaterialReq" icon="pdfIcon16.png"
						action="#{grid}.fireEvent(printMaterialReqForOrder,pdf);" state="disabled">
						<smallButton name="xlsMaterialReq" icon="xlsIcon16.png"
							action="#{grid}.fireEvent(printMaterialReqForOrder,xls);" state="disabled" />
					</smallButtons>
				</group>
			</ribbon>
			<component type="grid" name="orders" reference="grid">
				<script>
					<![CDATA[
						var print = #{window}.getRibbonItem("export.print");
						var pdfMaterialReq = #{window}.getRibbonItem("export.pdfMaterialReq");
						var xlsMaterialReq = #{window}.getRibbonItem("export.pdfMaterialReq.xlsMaterialReq");
						var pdfWorker = #{window}.getRibbonItem("exportPlan.pdfWorker");
						var xlsWorker = #{window}.getRibbonItem("exportPlan.xlsWorker");
						var pdfMachine = #{window}.getRibbonItem("exportPlan.pdfWorker.pdfMachine");
						var xlsMachine = #{window}.getRibbonItem("exportPlan.xlsWorker.xlsMachine");
						var pdfProduct = #{window}.getRibbonItem("exportPlan.pdfWorker.pdfProduct");
						var xlsProduct = #{window}.getRibbonItem("exportPlan.xlsWorker.xlsProduct");
						var activateOrder = #{window}.getRibbonItem("status.activateOrder");
						var listener = {
							onChange: function(selectedEntitiesArray) {
								if (!selectedEntitiesArray || selectedEntitiesArray.length == 0) {
									print.disable();
									pdfMaterialReq.disable();
									xlsMaterialReq.disable();
									pdfWorker.disable();
									xlsWorker.disable();
									pdfMachine.disable();
									xlsMachine.disable();
									pdfProduct.disable();
									xlsProduct.disable();
									activateOrder.disable();
								} else {
									if (selectedEntitiesArray.length == 1) {
										print.enable();
										var selectedEntityStatus = selectedEntitiesArray[0].fields.state;
										if (selectedEntityStatus == '01pending') {
											activateOrder.enable();
											activateOrder.state = "begin";
											activateOrder.setLabel("#{translate(products.orders.window.ribbon.status.activateOrder)}");
											activateOrder.setIcon('startIcon24.png');
										} else if (selectedEntityStatus == '02inProgress') {
											activateOrder.enable();
											activateOrder.state = "finish";
											activateOrder.setLabel("#{translate(products.orders.window.ribbon.status.finishOrder)}");
											activateOrder.setIcon('acceptIcon24.png');
										} else {
											activateOrder.disable();
										}
									} else {
										print.disable("#{translate(moreThanOneRecordSelected)}");
										activateOrder.disable("#{translate(moreThanOneRecordSelected)}");
									}
									pdfMaterialReq.enable();
									xlsMaterialReq.enable();
									pdfWorker.enable();
									xlsWorker.enable();
									pdfMachine.enable();
									xlsMachine.enable();
									pdfProduct.enable();
									xlsProduct.enable();
								}
							}
						}
						this.addOnChangeListener(listener);
					]]>
				</script>
				<option type="column" name="number" fields="number" link="true"
					width="50" />
				<option type="column" name="name" fields="name" link="true" />
				<option type="column" name="state" fields="state" width="40" />
				<option type="column" name="dateFrom" fields="dateFrom"
					width="40" />
				<option type="column" name="dateTo" fields="dateTo" width="40" />
				<option type="order" column="number" direction="desc" />
				<option type="correspondingView" value="products/order" />
				<option type="correspondingComponent" value="form" />
				<option type="searchable" value="name,number,state,dateFrom,dateTo" />
				<option type="orderable" value="name,number,state,dateFrom,dateTo" />
				<option type="fullscreen" value="true" />
				<option type="multiselect" value="true" />
				<option type="hasPredefinedFilters" value="true" />
				<predefinedFilters>
					<predefinedFilter name="all">
					</predefinedFilter>
					<predefinedFilter name="pending">
						<filterRestriction column="state" value="01pending" />
						<filterOrder column="dateFrom" direction="asc" />
					</predefinedFilter>
					<predefinedFilter name="inProgress">
						<filterRestriction column="state" value="02inProgress" />
						<filterOrder column="dateTo" direction="asc" />
					</predefinedFilter>
					<predefinedFilter name="overduePending">
						<filterRestriction column="state" value="01pending" />
						<filterRestriction column="dateTo" value="&lt;= @{yesterday}" />
					</predefinedFilter>
					<predefinedFilter name="overdueInProgress">
						<filterRestriction column="state" value="02inProgress" />
						<filterRestriction column="dateTo" value="&lt;= @{yesterday}" />
					</predefinedFilter>
					<predefinedFilter name="startingToday">
						<filterRestriction column="state" value="01pending" />
						<filterRestriction column="dateFrom" value="@{today}" />
					</predefinedFilter>
					<predefinedFilter name="startingTomorrow">
						<filterRestriction column="state" value="01pending" />
						<filterRestriction column="dateFrom" value="@{tomorrow}" />
					</predefinedFilter>
				</predefinedFilters>
				<listener event="printOrder" bean="com.qcadoo.mes.products.OrderService"
					method="printOrder" />
				<listener event="activateOrder" bean="com.qcadoo.mes.products.OrderService"
					method="activateOrder" />
			</component>
			<option type="fixedHeight" value="true" />
			<option type="header" value="false" />
		</component>
	</view>
	<view name="order" model="order">
		<component type="window" name="window" reference="window">
			<ribbon>
				<group template="navigation" />
				<group template="formSaveCopyAndRemoveActions" />
				<group name="status">
					<bigButton name="activateOrder" icon="startIcon24.png"
						state="disabled">
						<script>
							<![CDATA[
								this.element.width(100);
								this.addOnChangeListener({
									onClick: function() {
										this.element.width(100);
										if (this.state == "begin") {
											if (window.confirm("#{translate(products.orders.window.ribbon.status.activateOrder.confirm)}")) {
												if(window.canClose()) {
													#{form}.performEvent('activateOrder', [true]);
												}
											};
										} else if (this.state == "finish") {
											if (window.confirm("#{translate(products.orders.window.ribbon.status.finishOrder.confirm)}")) {
												if(window.canClose()) {
													#{form}.performEvent('activateOrder', [false]);
												}
											};
										}
									}
								});
							]]>
						</script>
					</bigButton>
				</group>
			</ribbon>
			<windowTab name="mainTab">
				<component type="form" name="order" reference="form">
					<script>
						<![CDATA[
							var save = #{window}.getRibbonItem("actions.save");
							var saveBack = #{window}.getRibbonItem("actions.saveBack");
							var saveNew = #{window}.getRibbonItem("actions.saveNew");
							var cancel = #{window}.getRibbonItem("actions.cancel");
							var del = #{window}.getRibbonItem("actions.delete");
							var activateOrder = #{window}.getRibbonItem("status.activateOrder");
							
							this.addOnChangeListener({
								onSetValue: function(value) {
									if (! value || ! value.content) {
										return;
									}
									save.enable();
									saveBack.enable();
									saveNew.enable();
									if (! value.content.entityId) {
										cancel.disable();
										del.disable();
										activateOrder.disable();
										return;
									}
									
									cancel.enable();
									del.enable();
									
									var state = #{state}.getValue().content.value;
									if (!state) {
										return;
									}
									if (state == "03done") {
										save.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
										saveBack.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
										saveNew.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
										cancel.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
										del.disable("#{translate(products.order.ribbon.message.stateIsDone)}");
										activateOrder.disable();
									} else if (state == "02inProgress") { 
										activateOrder.enable();
										activateOrder.state = "finish";
										activateOrder.setLabel("#{translate(products.orders.window.ribbon.status.finishOrder)}");
										activateOrder.setIcon('acceptIcon24.png');
									} else if (state == "01pending") {
										activateOrder.enable();
										activateOrder.state = "begin";
										activateOrder.setLabel("#{translate(products.orders.window.ribbon.status.activateOrder)}");
										activateOrder.setIcon('startIcon24.png');
									}
								}
							});
						]]>
					</script>
					<component type="gridLayout" name="gridLayout" columns="3"
						rows="7">
						<layoutElement column="1" row="1">
							<component type="select" name="state" field="state"
								reference="state" defaultEnabled="false" />
						</layoutElement>
						<layoutElement column="1" row="2">
							<component type="input" name="number" reference="number"
								field="number" />
						</layoutElement>
						<layoutElement column="1" row="3" height="2">
							<component type="textarea" name="name" field="name"
								reference="name" hasDescription="true" />
						</layoutElement>
						<!--<layoutElement column="1" row="5">
							<component type="separatorLine" name="line1" />
						</layoutElement>-->
						<layoutElement column="1" row="6">
							<component type="calendar" name="dateFrom" field="dateFrom">
								<listener event="onChange" bean="com.qcadoo.mes.products.OrderService"
									method="changeDateFrom" />
								<option type="labelWidth" value="55" />
							</component>
						</layoutElement>
						<layoutElement column="1" row="7">
							<component type="calendar" name="dateTo" field="dateTo"
								reference="dateTo">
								<option type="labelWidth" value="55" />
							</component>
						</layoutElement>
						<layoutElement column="2" row="1">
							<component type="lookup" name="product" reference="product"
								field="product">
								<option type="column" name="name" fields="name" link="true"
									width="200" />
								<option type="column" name="ean" fields="ean" />
								<option type="searchable" value="name,ean" />
								<option type="orderable" value="name,ean" />
								<option type="expression"
									value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
								<option type="fieldCode" value="number" />
								<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.products.OrderService"
									method="changeOrderProduct" />
								<listener event="onSelectedEntityChange" bean="com.qcadoo.mes.products.OrderService"
									method="setDefaultNameUsingProduct" />
								<listener event="onSelectedEntityChange"
									bean="com.qcadoo.mes.basic.util.UnitService" method="fillProductUnit" />
							</component>
						</layoutElement>
						<layoutElement column="2" row="2">
							<component type="input" name="defaultTechnology"
								reference="defaultTechnology" field="defaultTechnology"
								defaultEnabled="false" />
						</layoutElement>
						<layoutElement column="2" row="3">
							<component type="lookup" name="technology" reference="technology"
								field="technology" source="#{product}.technologies">
								<option type="column" name="name" fields="name" link="true"
									width="300" />
								<option type="searchable" value="name,number" />
								<option type="orderable" value="name,number" />
								<option type="expression"
									value="'&lt;b&gt;' + #number + '&lt;/b&gt; - ' + #name" />
								<option type="fieldCode" value="number" />
							</component>
						</layoutElement>
						<!--<layoutElement column="2" row="4">
							<component type="separatorLine" name="line2" />
						</layoutElement>-->
						<layoutElement column="2" row="5">
							<component type="input" name="plannedQuantity"
								reference="plannedQuantity" field="plannedQuantity">
								<option type="labelWidth" value="55" />
							</component>
						</layoutElement>
						<layoutElement column="2" row="6">
							<component type="input" name="doneQuantity" field="doneQuantity">
								<option type="labelWidth" value="55" />
							</component>
						</layoutElement>
						<layoutElement column="2" row="7">
							<component type="input" name="unit" reference="unit"
								defaultEnabled="false">
								<option type="labelWidth" value="55" />
							</component>
						</layoutElement>
					</component>
					<option type="header" value="true" />
					<option type="expression" value="#name + ' - ' + #number" />
					<listener event="activateOrder" bean="com.qcadoo.mes.products.OrderService"
						method="activateOrder" />
				</component>
			</windowTab>
			<windowTab name="detailsTab">
				<component type="gridLayout" name="detailsTablayout" columns="3" rows="4">
					<layoutElement column="1" row="1">
						<component type="calendar" name="effectiveDateFrom"
							field="#{form}.effectiveDateFrom" reference="effectiveDateFrom"
							defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="1" row="2">
						<component type="calendar" name="effectiveDateTo" field="#{form}.effectiveDateTo"
							reference="effectiveDateTo" defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="1" row="3">
						<component type="input" name="startWorker" field="#{form}.startWorker"
							reference="startWorker" defaultEnabled="false" />
					</layoutElement>
					<layoutElement column="1" row="4">
						<component type="input" name="endWorker" field="#{form}.endWorker"
							reference="endWorker" defaultEnabled="false" />
					</layoutElement>
				</component>
			</windowTab>
		</component>
		<preRenderHook bean="com.qcadoo.mes.products.OrderService"
			method="generateOrderNumber" />
		<preRenderHook bean="com.qcadoo.mes.products.OrderService"
			method="fillDefaultTechnology" />
		<preRenderHook bean="com.qcadoo.mes.products.OrderService"
			method="disableFormForDoneOrder" />
		<preRenderHook bean="com.qcadoo.mes.products.OrderService"
			method="disableTechnologiesIfProductDoesNotAny" />
		<preRenderHook bean="com.qcadoo.mes.products.OrderService"
			method="setAndDisableState" />
		<preRenderHook bean="com.qcadoo.mes.basic.util.UnitService"
			method="fillProductUnitPreRender" />
	</view>
</views>
